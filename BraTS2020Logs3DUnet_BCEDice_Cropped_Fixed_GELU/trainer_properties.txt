device:cuda
display_plot:True
net:UNet3d_GELU(
  (conv): DoubleConv(
    (double_conv): Sequential(
      (0): Conv3d(4, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (1): GroupNorm(8, 24, eps=1e-05, affine=True)
      (2): GELU(approximate='none')
      (3): Conv3d(24, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (4): GroupNorm(8, 24, eps=1e-05, affine=True)
      (5): GELU(approximate='none')
    )
  )
  (enc1): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(24, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 48, eps=1e-05, affine=True)
          (2): GELU(approximate='none')
          (3): Conv3d(48, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 48, eps=1e-05, affine=True)
          (5): GELU(approximate='none')
        )
      )
    )
  )
  (enc2): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(48, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 96, eps=1e-05, affine=True)
          (2): GELU(approximate='none')
          (3): Conv3d(96, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 96, eps=1e-05, affine=True)
          (5): GELU(approximate='none')
        )
      )
    )
  )
  (enc3): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(96, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): GELU(approximate='none')
          (3): Conv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 192, eps=1e-05, affine=True)
          (5): GELU(approximate='none')
        )
      )
    )
  )
  (enc4): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): GELU(approximate='none')
          (3): Conv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 192, eps=1e-05, affine=True)
          (5): GELU(approximate='none')
        )
      )
    )
  )
  (dec1): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(384, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 96, eps=1e-05, affine=True)
        (2): GELU(approximate='none')
        (3): Conv3d(96, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 96, eps=1e-05, affine=True)
        (5): GELU(approximate='none')
      )
    )
  )
  (dec2): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(192, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 48, eps=1e-05, affine=True)
        (2): GELU(approximate='none')
        (3): Conv3d(48, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 48, eps=1e-05, affine=True)
        (5): GELU(approximate='none')
      )
    )
  )
  (dec3): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(96, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): GELU(approximate='none')
        (3): Conv3d(24, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 24, eps=1e-05, affine=True)
        (5): GELU(approximate='none')
      )
    )
  )
  (dec4): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(48, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): GELU(approximate='none')
        (3): Conv3d(24, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 24, eps=1e-05, affine=True)
        (5): GELU(approximate='none')
      )
    )
  )
  (out): Out(
    (conv): Conv3d(24, 3, kernel_size=(1, 1, 1), stride=(1, 1, 1))
  )
)
criterion:BCEDiceLoss(
  (bce): BCEWithLogitsLoss()
  (dice): DiceLoss()
)
optimizer:Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: False
    lr: 5.000000000000001e-07
    maximize: False
    weight_decay: 0
)
scheduler:<torch.optim.lr_scheduler.ReduceLROnPlateau object at 0x7f790cce1700>
accumulation_steps:4
phases:['train', 'val']
num_epochs:50
dataloaders:{'train': <torch.utils.data.dataloader.DataLoader object at 0x7f79c74de700>, 'val': <torch.utils.data.dataloader.DataLoader object at 0x7f79c74ded90>, 'test': <torch.utils.data.dataloader.DataLoader object at 0x7f79c74deee0>}
best_loss:0.15423627514040694
losses:{'train': [1.363574515730709, 1.2026657799804166, 1.0918895602226257, 0.9990682975874201, 0.9000490307807922, 0.7798907784001455, 0.6314279894865058, 0.47445424275026576, 0.38343447990743834, 0.3400601464759261, 0.2747226391738359, 0.24473889900137716, 0.23386424700570196, 0.2218339568988452, 0.2121148744293492, 0.2019722697965999, 0.20449398432507715, 0.18613241258796176, 0.183829865499821, 0.18086932960741872, 0.17486648660988863, 0.17404310089383743, 0.1794077528661875, 0.1630196648263886, 0.15932697696547546, 0.17056923138664704, 0.16169611687555965, 0.15263207619407784, 0.14752199512130862, 0.14448847634427447, 0.1424240909885091, 0.14062159965983362, 0.13925328682187393, 0.13845315780986397, 0.13751167428640812, 0.13642083907308689, 0.13473701137100336, 0.134220903264819, 0.13388956273010022, 0.13257504202170517, 0.1312669228776553, 0.13089753020228995, 0.13051655244068047, 0.1293807364433664, 0.1281406649250268, 0.12869099941203802, 0.12621629926528313, 0.12552521621433047, 0.12541744771622432, 0.12531297863549606], 'val': [1.2735727800513215, 1.1435634999904993, 1.0448389818083565, 0.9524678194297934, 0.8579685260664742, 0.6998424805560202, 0.5459107604791533, 0.4078254230179877, 0.37503195399383327, 0.2927539272690719, 0.2975001370288291, 0.2559752195792378, 0.2888555722135418, 0.22425493612042013, 0.24156195656308588, 0.242771382320602, 0.1900311733754176, 0.18814729505552436, 0.18372698029819526, 0.17670078413947574, 0.18820351179478303, 0.22392785984952496, 0.16367817297577858, 0.18971999312909144, 0.16880090337879253, 0.18392723039636072, 0.18003006223237739, 0.167166993443696, 0.1620686449251085, 0.16154140571378311, 0.16007552028826946, 0.15808424241137956, 0.15748968481455208, 0.15924500659951624, 0.15747476664354215, 0.15726400750144473, 0.15854714571867348, 0.15647905840063994, 0.15561243181802192, 0.1557781916322573, 0.15790737877195737, 0.15540532648282232, 0.15466089841892133, 0.15545544864715272, 0.15687559509895882, 0.15641806780729653, 0.15423627514040694, 0.15437156594586823, 0.15443893198697073, 0.15444722504548306]}
dice_scores:{'train': [0.35248402, 0.59278154, 0.6240725, 0.6388514, 0.67246723, 0.71416676, 0.7422355, 0.7835121, 0.7785488, 0.76873004, 0.8080198, 0.8201679, 0.819824, 0.8229838, 0.82741773, 0.8331268, 0.82791406, 0.8432774, 0.84371054, 0.8448687, 0.8489913, 0.84931046, 0.84348625, 0.8578794, 0.8603251, 0.84991455, 0.85748154, 0.86577106, 0.8704975, 0.8734065, 0.8754171, 0.8769645, 0.87827986, 0.8789091, 0.87977105, 0.88070345, 0.8822605, 0.8826519, 0.88291436, 0.88412297, 0.8852529, 0.885463, 0.8858084, 0.8868242, 0.8877817, 0.88722074, 0.88954365, 0.8902661, 0.8903374, 0.8904325], 'val': [0.61441296, 0.6617136, 0.66644883, 0.67219853, 0.72241384, 0.69799656, 0.74552333, 0.7711448, 0.7355, 0.7988343, 0.7754843, 0.8014399, 0.75979376, 0.81640196, 0.7952867, 0.7878998, 0.83858305, 0.8384744, 0.84151876, 0.84640014, 0.8352084, 0.8025863, 0.85703415, 0.8320527, 0.8510312, 0.8370836, 0.8397027, 0.8518684, 0.85658234, 0.85722566, 0.858529, 0.86025786, 0.8608551, 0.85926586, 0.8606837, 0.8610244, 0.85969645, 0.8615407, 0.86241084, 0.8620488, 0.8600026, 0.86252254, 0.8627982, 0.86235434, 0.8607009, 0.86092454, 0.8630982, 0.86294687, 0.86294144, 0.8629209]}
jaccard_scores:{'train': [0.24973033, 0.43854538, 0.46978232, 0.48649985, 0.5246804, 0.57510763, 0.61068994, 0.659403, 0.6550938, 0.64077854, 0.6902979, 0.70587784, 0.7054772, 0.70879346, 0.7152768, 0.72401285, 0.7172032, 0.73606837, 0.7371927, 0.7396374, 0.74552035, 0.7474161, 0.7381565, 0.75823456, 0.76168686, 0.7478032, 0.7573027, 0.7694201, 0.7763496, 0.78061026, 0.78361136, 0.7860729, 0.78791493, 0.78891975, 0.7902478, 0.79183865, 0.79395866, 0.79461277, 0.79497564, 0.7969103, 0.79849786, 0.7989388, 0.79946154, 0.8009259, 0.8024595, 0.8016318, 0.80504006, 0.80611265, 0.8062922, 0.80641913], 'val': [0.4584997, 0.50759757, 0.5139873, 0.51774836, 0.58787626, 0.557354, 0.6090003, 0.6478475, 0.60326886, 0.67767775, 0.6578145, 0.68166286, 0.64538115, 0.7012113, 0.67582524, 0.671393, 0.7298682, 0.7298455, 0.7340175, 0.74148035, 0.7270072, 0.67963374, 0.75701624, 0.72373444, 0.74978185, 0.72912735, 0.73460793, 0.7509243, 0.75780404, 0.75898254, 0.7610757, 0.7634761, 0.7644814, 0.7624755, 0.7645811, 0.7650473, 0.762919, 0.76605874, 0.76731604, 0.7662542, 0.76399887, 0.7675393, 0.76772106, 0.7673749, 0.76484966, 0.76542425, 0.76850027, 0.7682588, 0.7682702, 0.7682173]}
last_completed_run_time:5:50:58.570332
parameter_count:5652507
