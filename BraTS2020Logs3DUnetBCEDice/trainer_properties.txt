device:cuda
display_plot:True
net:UNet3d(
  (conv): DoubleConv(
    (double_conv): Sequential(
      (0): Conv3d(4, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (1): GroupNorm(8, 24, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): Conv3d(24, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (4): GroupNorm(8, 24, eps=1e-05, affine=True)
      (5): ReLU(inplace=True)
    )
  )
  (enc1): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(24, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 48, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(48, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 48, eps=1e-05, affine=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  (enc2): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(48, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 96, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(96, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 96, eps=1e-05, affine=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  (enc3): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(96, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 192, eps=1e-05, affine=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  (enc4): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 192, eps=1e-05, affine=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  (dec1): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(384, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 96, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(96, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 96, eps=1e-05, affine=True)
        (5): ReLU(inplace=True)
      )
    )
  )
  (dec2): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(192, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 48, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(48, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 48, eps=1e-05, affine=True)
        (5): ReLU(inplace=True)
      )
    )
  )
  (dec3): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(96, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(24, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 24, eps=1e-05, affine=True)
        (5): ReLU(inplace=True)
      )
    )
  )
  (dec4): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(48, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(24, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 24, eps=1e-05, affine=True)
        (5): ReLU(inplace=True)
      )
    )
  )
  (out): Out(
    (conv): Conv3d(24, 3, kernel_size=(1, 1, 1), stride=(1, 1, 1))
  )
)
criterion:BCEDiceLoss(
  (bce): BCEWithLogitsLoss()
  (dice): DiceLoss()
)
optimizer:Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: False
    lr: 5.000000000000002e-09
    maximize: False
    weight_decay: 0
)
scheduler:<torch.optim.lr_scheduler.ReduceLROnPlateau object at 0x7f7b7a9ede50>
accumulation_steps:4
phases:['train', 'val']
num_epochs:50
dataloaders:{'train': <torch.utils.data.dataloader.DataLoader object at 0x7f7b79126970>, 'val': <torch.utils.data.dataloader.DataLoader object at 0x7f7b79114790>, 'test': <torch.utils.data.dataloader.DataLoader object at 0x7f7b791148e0>}
best_loss:0.17934540054708156
losses:{'train': [1.3829330509606423, 1.2411382121278305, 1.1361985310855474, 1.0502654751444045, 0.9674934232642896, 0.8806595872563554, 0.7639199565571977, 0.6279563079995347, 0.4928836540350896, 0.38720475341204, 0.33467027001054567, 0.2930871022461485, 0.27562449807336575, 0.24247016344120295, 0.2308013887346471, 0.23082192165656687, 0.2311100256930286, 0.2120512145440388, 0.20628974884181875, 0.20070536589044582, 0.1923988648467191, 0.18454402753155494, 0.18096422313397376, 0.18163336983425082, 0.1813665378286358, 0.17984314407345914, 0.16722192691759466, 0.16883197157668522, 0.16363702483560197, 0.15569512571558752, 0.15419756758519, 0.15343304655511117, 0.1515525603390692, 0.15103299680658167, 0.14946211792330324, 0.14921867025895716, 0.1485834918604604, 0.1463717325756985, 0.14603180128075324, 0.14590588866417853, 0.14562264407768902, 0.14560434488515892, 0.1455947549114209, 0.1455677198706471, 0.14556672116706126, 0.14556574189730923, 0.14556209567381856, 0.14556202325020906, 0.14556198082722638, 0.145561934693118], 'val': [1.300914487748776, 1.1845761987398256, 1.0889072890551585, 1.0079431207674854, 0.9221854142422946, 0.8235121807962094, 0.7199479633907102, 0.5757377856182602, 0.42090514246022925, 0.37389174216198473, 0.3004155116823484, 0.28038510370929287, 0.25111837319608005, 0.2433239443684524, 0.25575820075453454, 0.22478708231224204, 0.2253453866490778, 0.2102336515233202, 0.21284138692437476, 0.2129611886053715, 0.20860342526773237, 0.21995204405964547, 0.2057940459476327, 0.20225642776151873, 0.19578225868490506, 0.2054515742468384, 0.21086388756081742, 0.218596099682574, 0.18409230335141127, 0.18313554210482902, 0.18215542202288248, 0.18195792161068827, 0.18124952420311155, 0.17934540054708156, 0.1846821909805514, 0.17954853626916994, 0.1801779528833785, 0.1801799327697394, 0.1800365740398191, 0.1800167885310245, 0.17994225742119663, 0.17989318986546318, 0.17989435271834428, 0.17988255409137258, 0.17987385856093102, 0.17987104463127424, 0.17987074295304856, 0.17987046264252574, 0.17986959120574988, 0.17986982864029002]}
dice_scores:{'train': [0.34794983, 0.5866631, 0.61971503, 0.61167127, 0.6002614, 0.59961903, 0.6615666, 0.7017379, 0.7351013, 0.76749504, 0.768143, 0.7836517, 0.7844812, 0.8073074, 0.81209373, 0.8063884, 0.80261755, 0.8174567, 0.8213472, 0.82402045, 0.83075875, 0.837025, 0.83961654, 0.83842564, 0.8377361, 0.83877194, 0.8500126, 0.84794426, 0.8525893, 0.86016136, 0.8617637, 0.8624556, 0.864262, 0.86468357, 0.86606973, 0.8663074, 0.8668969, 0.86901915, 0.8693201, 0.86947733, 0.86972326, 0.8697429, 0.8697482, 0.86977166, 0.8697721, 0.8697747, 0.86977816, 0.8697783, 0.86977786, 0.8697778], 'val': [0.6109578, 0.6101286, 0.6243481, 0.6113888, 0.5762791, 0.62567306, 0.7075232, 0.7362934, 0.75623536, 0.7556146, 0.7863474, 0.786119, 0.7989324, 0.8013208, 0.782512, 0.81004924, 0.8050558, 0.81685156, 0.8126848, 0.8102578, 0.8130248, 0.8020006, 0.8151569, 0.8168896, 0.823453, 0.8129358, 0.8070867, 0.7998878, 0.8323877, 0.83327854, 0.834303, 0.83440435, 0.8351951, 0.83695, 0.8319341, 0.83683467, 0.836225, 0.8360855, 0.8361885, 0.8361954, 0.8362711, 0.8363234, 0.83631897, 0.8363297, 0.8363379, 0.836341, 0.8363412, 0.8363414, 0.8363426, 0.8363416]}
jaccard_scores:{'train': [0.2348915, 0.4353407, 0.4681911, 0.46004823, 0.4465704, 0.44749162, 0.5148541, 0.5655796, 0.60275847, 0.63822293, 0.64406776, 0.6625645, 0.6609742, 0.6900612, 0.6977239, 0.6882808, 0.6838133, 0.7041089, 0.70751095, 0.7105473, 0.7203774, 0.7280504, 0.7317237, 0.73033, 0.7300849, 0.7315037, 0.74618775, 0.74336463, 0.75021446, 0.7606385, 0.7630625, 0.7639114, 0.76658, 0.76710224, 0.7688594, 0.7693904, 0.770063, 0.7732191, 0.7736266, 0.77384806, 0.7742203, 0.7742491, 0.7742562, 0.7742904, 0.774291, 0.7742949, 0.77429956, 0.77429986, 0.7742992, 0.774299], 'val': [0.45306727, 0.45692378, 0.46870756, 0.45486408, 0.4206372, 0.473117, 0.57166654, 0.6033848, 0.62203664, 0.63440716, 0.6635674, 0.66199297, 0.6783344, 0.68347824, 0.66292167, 0.69321984, 0.68463194, 0.70252776, 0.6980217, 0.6950277, 0.69753325, 0.6846852, 0.70310074, 0.70544875, 0.71291375, 0.69786394, 0.6915345, 0.6826598, 0.72462213, 0.72596174, 0.7273045, 0.72750115, 0.72880113, 0.73067236, 0.72475284, 0.7308002, 0.7302388, 0.7300021, 0.73004454, 0.7300216, 0.7301227, 0.7301956, 0.73018616, 0.73020005, 0.7302096, 0.7302139, 0.7302142, 0.7302146, 0.7302169, 0.73021525]}
