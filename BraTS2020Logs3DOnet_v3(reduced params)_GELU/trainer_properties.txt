device:cuda
display_plot:True
net:ONet3d_v3_GELU(
  (conv): DoubleConvTwoOut(
    (DoubleConvTwoOut): Sequential(
      (0): Conv3d(4, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (1): GroupNorm(8, 24, eps=1e-05, affine=True)
      (2): GELU(approximate='none')
      (3): Conv3d(24, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (4): GroupNorm(8, 24, eps=1e-05, affine=True)
      (5): GELU(approximate='none')
    )
  )
  (enc1_bot): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(24, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 48, eps=1e-05, affine=True)
          (2): GELU(approximate='none')
        )
      )
    )
  )
  (enc2_bot): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(48, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 96, eps=1e-05, affine=True)
          (2): GELU(approximate='none')
        )
      )
    )
  )
  (enc3_bot): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(96, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): GELU(approximate='none')
        )
      )
    )
  )
  (enc4_bot): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): GELU(approximate='none')
        )
      )
    )
  )
  (enc1_top): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(24, 48, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          (1): GroupNorm(8, 48, eps=1e-05, affine=True)
          (2): GELU(approximate='none')
        )
      )
    )
  )
  (enc2_top): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(48, 96, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          (1): GroupNorm(8, 96, eps=1e-05, affine=True)
          (2): GELU(approximate='none')
        )
      )
    )
  )
  (enc3_top): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(96, 192, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): GELU(approximate='none')
        )
      )
    )
  )
  (enc4_top): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(192, 192, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): GELU(approximate='none')
        )
      )
    )
  )
  (dec1_bot): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(384, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 96, eps=1e-05, affine=True)
        (2): GELU(approximate='none')
      )
    )
  )
  (dec2_bot): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(192, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 48, eps=1e-05, affine=True)
        (2): GELU(approximate='none')
      )
    )
  )
  (dec3_bot): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(96, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): GELU(approximate='none')
      )
    )
  )
  (dec4_bot): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(48, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): GELU(approximate='none')
      )
    )
  )
  (dec1_top): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(384, 96, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        (1): GroupNorm(8, 96, eps=1e-05, affine=True)
        (2): GELU(approximate='none')
      )
    )
  )
  (dec2_top): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(192, 48, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        (1): GroupNorm(8, 48, eps=1e-05, affine=True)
        (2): GELU(approximate='none')
      )
    )
  )
  (dec3_top): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(96, 24, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): GELU(approximate='none')
      )
    )
  )
  (dec4_top): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(48, 24, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): GELU(approximate='none')
      )
    )
  )
  (before_out): BeforeOut(
    (mergeConv): Sequential(
      (0): Conv3d(48, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (1): GroupNorm(8, 24, eps=1e-05, affine=True)
      (2): GELU(approximate='none')
    )
  )
  (out): Out(
    (conv): Conv3d(24, 3, kernel_size=(1, 1, 1), stride=(1, 1, 1))
  )
)
criterion:BCEDiceLoss(
  (bce): BCEWithLogitsLoss()
  (dice): DiceLoss()
)
optimizer:Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: False
    lr: 5.000000000000002e-09
    maximize: False
    weight_decay: 0
)
scheduler:<torch.optim.lr_scheduler.ReduceLROnPlateau object at 0x7fb476e48e20>
accumulation_steps:4
phases:['train', 'val']
num_epochs:50
dataloaders:{'train': <torch.utils.data.dataloader.DataLoader object at 0x7fb3ab9c8730>, 'val': <torch.utils.data.dataloader.DataLoader object at 0x7fb3ab9c8b50>, 'test': <torch.utils.data.dataloader.DataLoader object at 0x7fb3ab9c8e80>}
best_loss:0.1464960440852732
losses:{'train': [1.260711349915189, 1.1145268646936453, 1.0047348549610762, 0.900834981026305, 0.7762235108437193, 0.6267542843582966, 0.4827584121730391, 0.36759419467286014, 0.3013694242719462, 0.25983796846617313, 0.22712436196581945, 0.21769005459637697, 0.19322377737937318, 0.18679782479094914, 0.18003540181558395, 0.17570915866374062, 0.16608485024238268, 0.162999466812316, 0.157680985592164, 0.15385910268065595, 0.15452903895833647, 0.14250216314377895, 0.1434094178359318, 0.1396532273167893, 0.13324009924560445, 0.1371121595652611, 0.13198619777825396, 0.1283194177249312, 0.12820806282044817, 0.1209018406929172, 0.11565980978111803, 0.11410416834084706, 0.11328404170138755, 0.11283393156052542, 0.112422744555845, 0.11151904900321036, 0.1105061451206869, 0.11034188161784705, 0.11032087905438681, 0.1101648144905558, 0.1101520637425633, 0.11014097695284923, 0.1101247036666698, 0.11012377847736779, 0.11012385655265344, 0.11012165738489238, 0.11012170208837596, 0.1101214100992725, 0.1101217046663335, 0.11012140701138928], 'val': [1.175895742650302, 1.0572349361653597, 0.9530730449928427, 0.8413006989461072, 0.6985266664118137, 0.5508525484013107, 0.4077831028767352, 0.3274818133070784, 0.3016378328485309, 0.2439851611852646, 0.21692835117848414, 0.21313482185579696, 0.20858386735308845, 0.20379386111250464, 0.21536316596112162, 0.18206003069315316, 0.1793755313979005, 0.19729227881948902, 0.1712092452172963, 0.17449593628352544, 0.16727191526091323, 0.17003075961234435, 0.17471658818002017, 0.16564055026139854, 0.15620644959919858, 0.15232014452230255, 0.1578625572739907, 0.1545945261165781, 0.15236428204291272, 0.1496005171453053, 0.14910885298027182, 0.14764287217326885, 0.1464960440852732, 0.14943793936158126, 0.1486019937075534, 0.14826265996638335, 0.14775489446408344, 0.14741688805087558, 0.14707450617877943, 0.14714322330535584, 0.14715053225463293, 0.147205152039258, 0.1472102477443668, 0.14721392284867899, 0.1472170021174089, 0.14721639152124244, 0.14721665889868196, 0.14721755704508638, 0.14721573137168614, 0.14721666951224488]}
dice_scores:{'train': [0.43213767, 0.63263124, 0.69149894, 0.6997399, 0.73475605, 0.7723296, 0.78598845, 0.80822396, 0.81565297, 0.8259383, 0.8382782, 0.83481324, 0.85046625, 0.8511308, 0.85379493, 0.8546005, 0.8617405, 0.8625102, 0.86599463, 0.86844474, 0.86670816, 0.8773971, 0.8755913, 0.878611, 0.884093, 0.8800967, 0.8844152, 0.8873724, 0.88713807, 0.89389396, 0.8986271, 0.9000368, 0.9007738, 0.9011099, 0.9014793, 0.902349, 0.9032485, 0.90341675, 0.90343916, 0.9035765, 0.903588, 0.90359604, 0.9036136, 0.9036157, 0.9036147, 0.9036174, 0.90361726, 0.90361685, 0.90361714, 0.9036174], 'val': [0.60194594, 0.7301431, 0.73567754, 0.7688499, 0.7587495, 0.7657953, 0.80686545, 0.80239445, 0.78977585, 0.8258044, 0.8374311, 0.8320549, 0.8315023, 0.83118254, 0.8178984, 0.84704775, 0.8463625, 0.8288336, 0.8519947, 0.84798384, 0.8539068, 0.8501784, 0.84583044, 0.8541431, 0.86290276, 0.8655376, 0.85989875, 0.86271244, 0.86482096, 0.86673576, 0.867149, 0.86849445, 0.8696292, 0.8667573, 0.86761785, 0.8679901, 0.8684283, 0.86872554, 0.8690248, 0.86896414, 0.86895645, 0.86892694, 0.8689221, 0.8689205, 0.86891735, 0.8689208, 0.86891794, 0.86891854, 0.8689214, 0.8689188]}
jaccard_scores:{'train': [0.31300429, 0.48052758, 0.5452678, 0.5559553, 0.59893084, 0.6433196, 0.6635244, 0.6906612, 0.702015, 0.7141357, 0.73037076, 0.726853, 0.74880564, 0.7486387, 0.75269234, 0.7538945, 0.763416, 0.76440567, 0.7699818, 0.77361995, 0.7709408, 0.78702086, 0.7839462, 0.78799474, 0.7969336, 0.79061264, 0.7972642, 0.8022047, 0.8011449, 0.8119688, 0.8191658, 0.8213709, 0.82249004, 0.8230072, 0.823635, 0.8250182, 0.82639843, 0.82667434, 0.82670933, 0.82690835, 0.82692575, 0.8269412, 0.8269698, 0.82697344, 0.8269718, 0.8269761, 0.8269759, 0.8269752, 0.8269758, 0.8269761], 'val': [0.44713926, 0.5914085, 0.59473497, 0.636812, 0.6255988, 0.63237965, 0.6883618, 0.6841202, 0.6621768, 0.71255565, 0.7299936, 0.7238771, 0.7210282, 0.72353876, 0.7046228, 0.7440993, 0.744597, 0.71605194, 0.75126237, 0.7445033, 0.7540709, 0.74848145, 0.7402605, 0.75495636, 0.76704895, 0.77066624, 0.76345956, 0.7668418, 0.7695327, 0.77301717, 0.77367085, 0.77551234, 0.77706814, 0.7731087, 0.7744519, 0.7750618, 0.7756461, 0.77604085, 0.7764379, 0.77635634, 0.7763468, 0.7763061, 0.7762996, 0.7762975, 0.77629304, 0.7762979, 0.77629393, 0.77629435, 0.7762992, 0.77629495]}
last_completed_run_time:6:39:10.236862
parameter_count:3150435
