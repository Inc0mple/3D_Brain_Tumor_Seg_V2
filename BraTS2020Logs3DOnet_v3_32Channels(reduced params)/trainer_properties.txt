device:cuda
display_plot:True
net:ONet3d_v3(
  (conv): DoubleConvTwoOut(
    (DoubleConvTwoOut): Sequential(
      (0): Conv3d(4, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (1): GroupNorm(8, 32, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (4): GroupNorm(8, 32, eps=1e-05, affine=True)
      (5): ReLU(inplace=True)
    )
  )
  (enc1_bot): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(32, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 64, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (enc2_bot): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 128, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (enc3_bot): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 256, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (enc4_bot): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 256, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (enc1_top): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(32, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          (1): GroupNorm(8, 64, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (enc2_top): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(64, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          (1): GroupNorm(8, 128, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (enc3_top): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(128, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          (1): GroupNorm(8, 256, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (enc4_top): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          (1): GroupNorm(8, 256, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (dec1_bot): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(512, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 128, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (dec2_bot): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(256, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 64, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (dec3_bot): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 32, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (dec4_bot): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 32, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (dec1_top): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(512, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        (1): GroupNorm(8, 128, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (dec2_top): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(256, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        (1): GroupNorm(8, 64, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (dec3_top): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(128, 32, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        (1): GroupNorm(8, 32, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (dec4_top): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(64, 32, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        (1): GroupNorm(8, 32, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (before_out): BeforeOut(
    (mergeConv): Sequential(
      (0): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (1): GroupNorm(8, 32, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
    )
  )
  (out): Out(
    (conv): Conv3d(32, 3, kernel_size=(1, 1, 1), stride=(1, 1, 1))
  )
)
criterion:BCEDiceLoss(
  (bce): BCEWithLogitsLoss()
  (dice): DiceLoss()
)
optimizer:Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: False
    lr: 5.000000000000002e-09
    maximize: False
    weight_decay: 0
)
scheduler:<torch.optim.lr_scheduler.ReduceLROnPlateau object at 0x7fa292913c70>
accumulation_steps:4
phases:['train', 'val']
num_epochs:50
dataloaders:{'train': <torch.utils.data.dataloader.DataLoader object at 0x7fa292848ac0>, 'val': <torch.utils.data.dataloader.DataLoader object at 0x7fa2928a37f0>, 'test': <torch.utils.data.dataloader.DataLoader object at 0x7fa2928a38b0>}
best_loss:0.1557166395041178
losses:{'train': [1.3054928562033765, 1.147444587696641, 1.0326140799449877, 0.9267138152068105, 0.8019969200453377, 0.656771807729518, 0.5074687702120937, 0.37521527809561883, 0.3046803882933388, 0.2684406184311602, 0.24207773308903546, 0.2183797525758979, 0.2034130649988189, 0.20374602442005288, 0.18574730539163256, 0.18823536491099419, 0.18568676180372673, 0.17106773228359767, 0.16804311321092197, 0.17239474618502895, 0.16611323852672777, 0.1669975903324301, 0.1584238620482017, 0.14875816019825608, 0.1476132988703115, 0.1506519480378229, 0.13883531959054587, 0.13295591420037212, 0.13068742171893102, 0.12965603861178734, 0.12879450386921262, 0.12732990182397938, 0.12720150557194373, 0.1266502524396766, 0.12616829300731308, 0.12502994028561015, 0.12353757420420193, 0.12330578985719626, 0.12325587456500575, 0.12315656852416212, 0.12304748838392048, 0.12297728482081409, 0.12270755058742294, 0.12270302841078645, 0.12270119341494012, 0.12267124393650335, 0.12267001579469601, 0.12267055244896802, 0.12266670590967733, 0.12266679865949054], 'val': [1.209400473900561, 1.0850916381152171, 0.9786358149546497, 0.8693754639265672, 0.7311437478605306, 0.5833248040586148, 0.4184510460439718, 0.3307778146469368, 0.2740608330042857, 0.26131601842506874, 0.24504510257041678, 0.20772357299080435, 0.20064178643361577, 0.19223222038093604, 0.24816862254772545, 0.1993414877720599, 0.18707703391336045, 0.19240700523808318, 0.19004348538956553, 0.17705203030469283, 0.18565461334754835, 0.191554013288246, 0.169301782435966, 0.17790152891626898, 0.1738626019994043, 0.17204748839139938, 0.1625067356200713, 0.16062029401929873, 0.15868715393655705, 0.15857256843515163, 0.15815793554175575, 0.15732892609710963, 0.15580757524607317, 0.15724502883429797, 0.1572537637965859, 0.15656028744184747, 0.15634383078453676, 0.15585025259346333, 0.1557166395041178, 0.15590210315191522, 0.15639912639305276, 0.15614018764979434, 0.15617594959319764, 0.1561773401105179, 0.1561736525651419, 0.15617150384581313, 0.15617526596728362, 0.15617189633677592, 0.15617199713047944, 0.15617269804736353]}
dice_scores:{'train': [0.32911325, 0.5862401, 0.6248879, 0.6165617, 0.6599209, 0.70950276, 0.74224484, 0.79078853, 0.80425227, 0.8093812, 0.81828547, 0.8307184, 0.83771044, 0.8323596, 0.8464155, 0.8406618, 0.8420595, 0.8541558, 0.8551657, 0.8503272, 0.8554539, 0.8537818, 0.8610079, 0.86944157, 0.8702507, 0.866791, 0.8775598, 0.8830997, 0.8851983, 0.88617235, 0.88695616, 0.8882373, 0.88845176, 0.88895583, 0.88931006, 0.8903882, 0.8917095, 0.8919011, 0.8919601, 0.89210546, 0.8922091, 0.89226484, 0.89253443, 0.89253414, 0.8925339, 0.89256465, 0.8925656, 0.8925658, 0.89256984, 0.8925694], 'val': [0.57887733, 0.64390767, 0.64936614, 0.63372934, 0.72509694, 0.71957827, 0.7859646, 0.79399604, 0.8125514, 0.8054283, 0.8069698, 0.8354816, 0.83707637, 0.84158266, 0.7835214, 0.82808226, 0.8382758, 0.83191466, 0.832772, 0.8447352, 0.8360012, 0.8288995, 0.8504473, 0.84147465, 0.8448379, 0.8463712, 0.8547394, 0.85664296, 0.8584468, 0.85851204, 0.85888714, 0.8597423, 0.8611982, 0.8596686, 0.8597277, 0.8603711, 0.86055523, 0.8611193, 0.8612561, 0.86110675, 0.86061585, 0.8608873, 0.8608461, 0.8608418, 0.86084855, 0.8608486, 0.8608461, 0.8608479, 0.86084795, 0.86084783]}
jaccard_scores:{'train': [0.23626688, 0.43588018, 0.47225708, 0.46178114, 0.50936615, 0.567319, 0.6097171, 0.6683591, 0.68527037, 0.69175506, 0.7029359, 0.7202206, 0.7297868, 0.7216815, 0.74194574, 0.73456854, 0.7353413, 0.7519285, 0.7537315, 0.7475552, 0.75373244, 0.75176394, 0.76187885, 0.7745299, 0.77540696, 0.77084255, 0.78645515, 0.794766, 0.79798895, 0.7993897, 0.80053025, 0.8026563, 0.8029089, 0.8035964, 0.80417925, 0.80584764, 0.8078702, 0.80820864, 0.8082756, 0.8085118, 0.8086304, 0.8087565, 0.80915076, 0.80915236, 0.80915314, 0.80920076, 0.8092022, 0.80920196, 0.8092083, 0.80920756], 'val': [0.42574862, 0.4893532, 0.49421462, 0.4788352, 0.5822751, 0.58066, 0.66180336, 0.67247987, 0.6929289, 0.6840686, 0.69001555, 0.72812295, 0.729013, 0.7344623, 0.6598533, 0.71690714, 0.73062235, 0.72042674, 0.72512716, 0.7384433, 0.72833586, 0.7178705, 0.7481503, 0.7378303, 0.7419404, 0.7434175, 0.75582325, 0.75840527, 0.76079583, 0.7610422, 0.76180524, 0.7628169, 0.7646887, 0.7629818, 0.7633186, 0.7640799, 0.7643794, 0.7650905, 0.765206, 0.7650705, 0.76448184, 0.7648195, 0.76477367, 0.7647711, 0.7647801, 0.76477885, 0.7647765, 0.7647781, 0.76477844, 0.764777]}
last_completed_run_time:12:10:09.814454
parameter_count:5597571
