device:cuda
display_plot:True
net:ONet3d_v3_DoubleConv(
  (conv): DoubleConvTwoOut(
    (DoubleConvTwoOut): Sequential(
      (0): Conv3d(4, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (1): GroupNorm(8, 24, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): Conv3d(24, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (4): GroupNorm(8, 24, eps=1e-05, affine=True)
      (5): ReLU(inplace=True)
    )
  )
  (enc1_bot): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(24, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 48, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(48, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 48, eps=1e-05, affine=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  (enc2_bot): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(48, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 96, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(96, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 96, eps=1e-05, affine=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  (enc3_bot): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(96, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 192, eps=1e-05, affine=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  (enc4_bot): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 192, eps=1e-05, affine=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  (enc1_top): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(24, 48, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          (1): GroupNorm(8, 48, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(48, 48, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          (4): GroupNorm(8, 48, eps=1e-05, affine=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  (enc2_top): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(48, 96, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          (1): GroupNorm(8, 96, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(96, 96, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          (4): GroupNorm(8, 96, eps=1e-05, affine=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  (enc3_top): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(96, 192, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(192, 192, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          (4): GroupNorm(8, 192, eps=1e-05, affine=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  (enc4_top): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(192, 192, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(192, 192, kernel_size=(1, 1, 1), stride=(1, 1, 1))
          (4): GroupNorm(8, 192, eps=1e-05, affine=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  (dec1_bot): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(384, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 96, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(96, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 96, eps=1e-05, affine=True)
        (5): ReLU(inplace=True)
      )
    )
  )
  (dec2_bot): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(192, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 48, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(48, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 48, eps=1e-05, affine=True)
        (5): ReLU(inplace=True)
      )
    )
  )
  (dec3_bot): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(96, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(24, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 24, eps=1e-05, affine=True)
        (5): ReLU(inplace=True)
      )
    )
  )
  (dec4_bot): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(48, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(24, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 24, eps=1e-05, affine=True)
        (5): ReLU(inplace=True)
      )
    )
  )
  (dec1_top): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(384, 96, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        (1): GroupNorm(8, 96, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(96, 96, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        (4): GroupNorm(8, 96, eps=1e-05, affine=True)
        (5): ReLU(inplace=True)
      )
    )
  )
  (dec2_top): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(192, 48, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        (1): GroupNorm(8, 48, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(48, 48, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        (4): GroupNorm(8, 48, eps=1e-05, affine=True)
        (5): ReLU(inplace=True)
      )
    )
  )
  (dec3_top): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(96, 24, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(24, 24, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        (4): GroupNorm(8, 24, eps=1e-05, affine=True)
        (5): ReLU(inplace=True)
      )
    )
  )
  (dec4_top): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(48, 24, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(24, 24, kernel_size=(1, 1, 1), stride=(1, 1, 1))
        (4): GroupNorm(8, 24, eps=1e-05, affine=True)
        (5): ReLU(inplace=True)
      )
    )
  )
  (before_out): BeforeOut(
    (mergeConv): Sequential(
      (0): Conv3d(48, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (1): GroupNorm(8, 24, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
    )
  )
  (out): Out(
    (conv): Conv3d(24, 3, kernel_size=(1, 1, 1), stride=(1, 1, 1))
  )
)
criterion:BCEDiceLoss(
  (bce): BCEWithLogitsLoss()
  (dice): DiceLoss()
)
optimizer:Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: False
    lr: 5e-05
    maximize: False
    weight_decay: 0
)
scheduler:<torch.optim.lr_scheduler.ReduceLROnPlateau object at 0x7fe8f9dd2f10>
accumulation_steps:4
phases:['train', 'val']
num_epochs:50
dataloaders:{'train': <torch.utils.data.dataloader.DataLoader object at 0x7fe8f9ce6f40>, 'val': <torch.utils.data.dataloader.DataLoader object at 0x7fe8f9ce68b0>, 'test': <torch.utils.data.dataloader.DataLoader object at 0x7fe8f9ce6520>}
best_loss:0.1567012463116421
losses:{'train': [1.3575041978531464, 1.2200560506305766, 1.1067455737309764, 1.015776776088961, 0.9264347582715545, 0.8235237226740035, 0.6960787552164535, 0.549061220068442, 0.4393978610124878, 0.36005089576480054, 0.30200181912786606, 0.2692847522435986, 0.25701636163794045, 0.23400852928370125, 0.22848479078636424, 0.21409577578872782, 0.216051970881201, 0.21820297080867643, 0.2076944613638033, 0.19549095344520795, 0.1843826569928416, 0.18109564640392822, 0.17354212953450562, 0.16902354421951019, 0.16801900583754928, 0.16507471545454214, 0.15879085131641124, 0.16201517919340513, 0.15291598919396618, 0.16138826939542938, 0.15574889421859622, 0.15234377747932767, 0.15272086991896647, 0.15721225629457955, 0.15228984179152283, 0.1420647056893704, 0.13643826423885705, 0.134267042174992, 0.13318062089241955, 0.1319064050204627, 0.13074537312803158, 0.13035089021173266, 0.12957325477167228, 0.12881944399369533, 0.12787773140029762, 0.12779698469906253, 0.12781915159279855, 0.12625784953850758, 0.12634988928022495, 0.12601151303193414], 'val': [1.2820333984662902, 1.1579433342195906, 1.0615947257797673, 0.971522791205712, 0.87847053779746, 0.7586472124423621, 0.6151084450055968, 0.47934711485538845, 0.39797543579677364, 0.323534368625227, 0.3025258734541119, 0.32372514397468205, 0.24131522454180807, 0.2284187691391639, 0.23124160687878448, 0.21465835340742795, 0.22685180112438383, 0.2116415043765644, 0.21316450032985435, 0.19256663955045197, 0.19959709329425163, 0.19250325324400416, 0.17717329075313965, 0.1924706462700412, 0.18695284693308598, 0.17566171316605694, 0.17170750363817755, 0.16834679569275873, 0.17283106454700795, 0.17342085510773478, 0.16761028731487831, 0.1618158479906478, 0.17071102257325965, 0.16656018435111586, 0.1861899601260446, 0.16454405717129977, 0.16275887915267134, 0.1613607735566373, 0.16112269693106976, 0.1601443831228985, 0.16422074063206618, 0.16027523949742317, 0.15882496472518398, 0.15982478083866947, 0.15903860822601137, 0.1569342737630853, 0.1591333603521563, 0.16108243603189037, 0.1567012463116421, 0.1583539423234058]}
dice_scores:{'train': [0.19485354, 0.4537937, 0.5769501, 0.576468, 0.59267664, 0.62568724, 0.6524719, 0.73831224, 0.7522049, 0.7700872, 0.79546356, 0.80717874, 0.8035945, 0.8161144, 0.81513584, 0.8244319, 0.81903994, 0.81517273, 0.82306045, 0.83266217, 0.84179896, 0.84400827, 0.8496481, 0.85339195, 0.8534901, 0.85563546, 0.86088854, 0.8574865, 0.86559755, 0.8572378, 0.86225784, 0.8649912, 0.8644063, 0.8602938, 0.8644794, 0.8739436, 0.87897134, 0.8809528, 0.8819316, 0.8830918, 0.88417614, 0.88455254, 0.88521945, 0.8859145, 0.88670295, 0.8867816, 0.8867567, 0.8882048, 0.8880036, 0.888349], 'val': [0.33104762, 0.59444547, 0.6123498, 0.5962605, 0.65091056, 0.6468564, 0.71449864, 0.7394391, 0.7468151, 0.7886572, 0.7827637, 0.74546057, 0.8120038, 0.81615436, 0.8078574, 0.8203506, 0.806471, 0.820716, 0.81644964, 0.8339794, 0.82597184, 0.8311872, 0.84585434, 0.83024865, 0.8362173, 0.8451633, 0.8482312, 0.8510475, 0.8462877, 0.84578186, 0.8505584, 0.8553395, 0.84764695, 0.85120565, 0.83219725, 0.85236806, 0.8540757, 0.8554942, 0.85571396, 0.8565095, 0.85279036, 0.8565572, 0.8577925, 0.8568835, 0.85746557, 0.8594523, 0.8573159, 0.85553056, 0.85963356, 0.8580369]}
jaccard_scores:{'train': [0.13726953, 0.31595293, 0.42108345, 0.42066878, 0.43797496, 0.47020775, 0.5018751, 0.60348856, 0.6191513, 0.64462, 0.6732308, 0.6908688, 0.68490547, 0.70078534, 0.7008488, 0.71366644, 0.7056176, 0.69958764, 0.71066314, 0.7240652, 0.73658353, 0.73879856, 0.74709976, 0.75172555, 0.7520981, 0.754984, 0.76230377, 0.75823486, 0.769386, 0.7580642, 0.7644876, 0.76863676, 0.7679474, 0.76233435, 0.7678365, 0.7820747, 0.78934795, 0.79232687, 0.7937088, 0.7955142, 0.79696584, 0.7975898, 0.79854935, 0.79961044, 0.80080354, 0.8007836, 0.8008282, 0.80294925, 0.80272937, 0.80312514], 'val': [0.21486367, 0.43740287, 0.45460254, 0.43919697, 0.4919137, 0.4879682, 0.5689783, 0.60461247, 0.606995, 0.66726786, 0.65760064, 0.61474794, 0.69525284, 0.7028704, 0.6912031, 0.70728844, 0.69125336, 0.7075216, 0.7016562, 0.72590023, 0.7147748, 0.7213524, 0.74110806, 0.72271335, 0.7288807, 0.7416628, 0.7450184, 0.75047207, 0.74227595, 0.7426903, 0.7502088, 0.7568585, 0.7473629, 0.74955404, 0.7249, 0.75339013, 0.7561226, 0.7579331, 0.7580584, 0.7589714, 0.75495744, 0.75951415, 0.76112616, 0.7600489, 0.76039714, 0.76313657, 0.76027656, 0.7584519, 0.7633311, 0.7617482]}
last_completed_run_time:5:51:38.640594
parameter_count:5896515
