device:cuda
display_plot:True
net:UNet3d(
  (conv): DoubleConv(
    (double_conv): Sequential(
      (0): Conv3d(4, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (1): GroupNorm(8, 24, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): Conv3d(24, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (4): GroupNorm(8, 24, eps=1e-05, affine=True)
      (5): ReLU(inplace=True)
    )
  )
  (enc1): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(24, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 48, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(48, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 48, eps=1e-05, affine=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  (enc2): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(48, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 96, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(96, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 96, eps=1e-05, affine=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  (enc3): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(96, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 192, eps=1e-05, affine=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  (enc4): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 192, eps=1e-05, affine=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  (dec1): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(384, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 96, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(96, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 96, eps=1e-05, affine=True)
        (5): ReLU(inplace=True)
      )
    )
  )
  (dec2): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(192, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 48, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(48, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 48, eps=1e-05, affine=True)
        (5): ReLU(inplace=True)
      )
    )
  )
  (dec3): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(96, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(24, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 24, eps=1e-05, affine=True)
        (5): ReLU(inplace=True)
      )
    )
  )
  (dec4): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(48, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(24, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 24, eps=1e-05, affine=True)
        (5): ReLU(inplace=True)
      )
    )
  )
  (out): Out(
    (conv): Conv3d(24, 3, kernel_size=(1, 1, 1), stride=(1, 1, 1))
  )
)
criterion:BCEDiceLoss(
  (bce): BCEWithLogitsLoss()
  (dice): DiceLoss()
)
optimizer:Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: False
    lr: 5.000000000000001e-07
    maximize: False
    weight_decay: 0
)
scheduler:<torch.optim.lr_scheduler.ReduceLROnPlateau object at 0x7f08f22b95e0>
accumulation_steps:4
phases:['train', 'val']
num_epochs:50
dataloaders:{'train': <torch.utils.data.dataloader.DataLoader object at 0x7f08f0230f10>, 'val': <torch.utils.data.dataloader.DataLoader object at 0x7f08f0230a60>, 'test': <torch.utils.data.dataloader.DataLoader object at 0x7f08f0230910>}
best_loss:0.17459256230097897
losses:{'train': [1.3745764013478965, 1.2277857010808735, 1.1141678346427222, 1.0193186934909892, 0.9207225047590162, 0.8081058864357807, 0.6731514844604318, 0.537671077727365, 0.42854223034907657, 0.34731933208246196, 0.2980887638865315, 0.27855570801310664, 0.24605475550255396, 0.22266406520577892, 0.21710222064315593, 0.20596713935354363, 0.20313427376316529, 0.197389995672177, 0.19311842883267782, 0.17804596962640948, 0.1745339020406792, 0.17303956495491724, 0.17155435082180417, 0.1702691166459834, 0.16900750663230626, 0.16807274271100192, 0.16712680862713675, 0.16698390412579925, 0.1659757334016575, 0.16453300937726922, 0.16353950747235646, 0.16350922053644412, 0.1611559506746526, 0.1609172695263257, 0.1596548287162536, 0.15877284637932088, 0.1587473318094083, 0.15741719411749802, 0.15683236301738498, 0.15565507214502236, 0.15581793983966225, 0.15371242198144075, 0.15316089346098355, 0.15221454220126338, 0.15019592020958095, 0.14944432484616346, 0.1491990927960936, 0.14888209567720445, 0.14885525430903235, 0.14885635097500488], 'val': [1.2891483216915491, 1.1651049694924984, 1.0611937293466531, 0.9710603446330665, 0.8647946602893326, 0.7376330393665241, 0.6012604545872167, 0.4980671377676838, 0.3698143556995212, 0.3317726316317072, 0.26385834742829484, 0.2715012217467686, 0.24744660632227952, 0.21494554447115594, 0.26104985233747735, 0.20188806318449523, 0.21572833578541595, 0.20233577011891132, 0.202436478351647, 0.19138159827803666, 0.1902130570895267, 0.19054201990365982, 0.19027121027685562, 0.18978970638423595, 0.18764043599367142, 0.18493149851290686, 0.18511671643212158, 0.18544705886885804, 0.18217989816418234, 0.18301159523005756, 0.1810111313495996, 0.18074895216608947, 0.17924285862805708, 0.17828210808758466, 0.18139616737388214, 0.17921269291414405, 0.17747275334484172, 0.17791162529643975, 0.17924953547288786, 0.1756875437666785, 0.17463875807962329, 0.17544414763743021, 0.1763504075835336, 0.1749029519422999, 0.1749386412776866, 0.1749648134803997, 0.1746270977101236, 0.17459884756859742, 0.17459256230097897, 0.17470570653676987]}
dice_scores:{'train': [0.3589347, 0.6028243, 0.63494, 0.6343864, 0.66710395, 0.7041661, 0.72877496, 0.7494832, 0.76666355, 0.78708917, 0.7982824, 0.79608524, 0.813343, 0.82691807, 0.8254375, 0.83187145, 0.83066213, 0.83346874, 0.8358088, 0.8489119, 0.8518084, 0.8531275, 0.8544044, 0.8554908, 0.8565074, 0.8572483, 0.85800886, 0.85791385, 0.8587406, 0.85986483, 0.86084694, 0.8605018, 0.86262286, 0.8627594, 0.86357456, 0.8643337, 0.8642101, 0.86538476, 0.8656826, 0.8666029, 0.8663371, 0.8680206, 0.8683736, 0.86921567, 0.87081414, 0.87168205, 0.8719118, 0.87221694, 0.87224215, 0.8722362], 'val': [0.58765686, 0.62543494, 0.65958923, 0.6817077, 0.6785119, 0.7560478, 0.76491314, 0.7540856, 0.77959764, 0.7789937, 0.8160063, 0.792719, 0.80603087, 0.82982874, 0.77962726, 0.8315871, 0.81612664, 0.8264811, 0.8253853, 0.83507913, 0.83602303, 0.83533514, 0.8354356, 0.835874, 0.8377532, 0.84015507, 0.8401236, 0.8391406, 0.84258187, 0.84152925, 0.84319025, 0.8432099, 0.844491, 0.8452714, 0.84232026, 0.8445847, 0.8456968, 0.8451168, 0.8437458, 0.8469844, 0.84782857, 0.84693503, 0.8463243, 0.84650975, 0.8467297, 0.84677327, 0.8471304, 0.84715354, 0.8471613, 0.8470543]}
jaccard_scores:{'train': [0.24533841, 0.45187214, 0.4855295, 0.4885971, 0.5236922, 0.5654891, 0.592862, 0.6197196, 0.64079714, 0.6625251, 0.6803736, 0.6758699, 0.697134, 0.715107, 0.7127754, 0.7212143, 0.71956265, 0.72305214, 0.72581184, 0.7446592, 0.7487829, 0.75067234, 0.75245047, 0.75390416, 0.75541633, 0.7566246, 0.75769645, 0.7575069, 0.75865376, 0.76020885, 0.7617262, 0.7611727, 0.76420647, 0.76440954, 0.76536554, 0.7665887, 0.7663101, 0.76816994, 0.76865464, 0.7698615, 0.7694391, 0.7719712, 0.7724814, 0.7736645, 0.77588886, 0.77721864, 0.77757955, 0.7780084, 0.7780469, 0.7780494], 'val': [0.4359943, 0.47025087, 0.5089952, 0.5356279, 0.53432316, 0.6253458, 0.63726705, 0.61857873, 0.6551154, 0.6538509, 0.70153713, 0.67020714, 0.6897147, 0.7192725, 0.6542063, 0.7215347, 0.70289505, 0.7137574, 0.71277535, 0.7265848, 0.72782266, 0.7271371, 0.7273186, 0.7279469, 0.73038435, 0.73394215, 0.73362935, 0.7325026, 0.7373643, 0.73589605, 0.73773134, 0.73795664, 0.7397431, 0.740689, 0.7370962, 0.7402799, 0.7414515, 0.7409596, 0.73874146, 0.74337274, 0.7446571, 0.7436881, 0.7422354, 0.74282485, 0.7430854, 0.7431253, 0.7436044, 0.74363166, 0.7436385, 0.7434942]}
last_completed_run_time:4:38:10.980250
