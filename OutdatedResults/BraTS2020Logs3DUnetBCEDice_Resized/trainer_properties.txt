device:cuda
display_plot:True
net:UNet3d(
  (conv): DoubleConv(
    (double_conv): Sequential(
      (0): Conv3d(4, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (1): GroupNorm(8, 24, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): Conv3d(24, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (4): GroupNorm(8, 24, eps=1e-05, affine=True)
      (5): ReLU(inplace=True)
    )
  )
  (enc1): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(24, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 48, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(48, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 48, eps=1e-05, affine=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  (enc2): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(48, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 96, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(96, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 96, eps=1e-05, affine=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  (enc3): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(96, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 192, eps=1e-05, affine=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  (enc4): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 192, eps=1e-05, affine=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  (dec1): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(384, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 96, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(96, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 96, eps=1e-05, affine=True)
        (5): ReLU(inplace=True)
      )
    )
  )
  (dec2): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(192, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 48, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(48, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 48, eps=1e-05, affine=True)
        (5): ReLU(inplace=True)
      )
    )
  )
  (dec3): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(96, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(24, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 24, eps=1e-05, affine=True)
        (5): ReLU(inplace=True)
      )
    )
  )
  (dec4): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(48, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(24, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 24, eps=1e-05, affine=True)
        (5): ReLU(inplace=True)
      )
    )
  )
  (out): Out(
    (conv): Conv3d(24, 3, kernel_size=(1, 1, 1), stride=(1, 1, 1))
  )
)
criterion:BCEDiceLoss(
  (bce): BCEWithLogitsLoss()
  (dice): DiceLoss()
)
optimizer:Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: False
    lr: 5e-06
    maximize: False
    weight_decay: 0
)
scheduler:<torch.optim.lr_scheduler.ReduceLROnPlateau object at 0x7f9a08705c70>
accumulation_steps:4
phases:['train', 'val']
num_epochs:50
dataloaders:{'train': <torch.utils.data.dataloader.DataLoader object at 0x7f9a06dc3580>, 'val': <torch.utils.data.dataloader.DataLoader object at 0x7f9a06dc3b50>, 'test': <torch.utils.data.dataloader.DataLoader object at 0x7f9a06dc3c40>}
best_loss:0.1447221615685607
losses:{'train': [1.3772439136251298, 1.228215815903116, 1.1185877903332728, 1.0277482583948867, 0.926230054391201, 0.8088351914184628, 0.6652565149753266, 0.5013060054738259, 0.3666033283612574, 0.2940786191945747, 0.24571638135062424, 0.21905436845560036, 0.20274780645343288, 0.19461742010916594, 0.18099299017977352, 0.17740435773655489, 0.1731259830777636, 0.16467681007296867, 0.16376698031284964, 0.15665608070819098, 0.1632512819319397, 0.1568114137694863, 0.14790594100442223, 0.14452404116666362, 0.1424033422405502, 0.1411173595788361, 0.1402331592777156, 0.13958217059138156, 0.1392007698181011, 0.13779478904015666, 0.13691434418577206, 0.13715658005426137, 0.1359432588540329, 0.13514317963059863, 0.13481228717889623, 0.13387357549805604, 0.1334395915156535, 0.13265834541941776, 0.1327170085997636, 0.13147474648324708, 0.13167237547073982, 0.13067282455842305, 0.12963610064564096, 0.12929755415299998, 0.12921087156287164, 0.13005728368070188, 0.12721499302088082, 0.12678954904693615, 0.12646815053297086, 0.12639036157058672], 'val': [1.2889119116765149, 1.1667656471144479, 1.0663700036282808, 0.9727361483393975, 0.8662748246822717, 0.7285316204125026, 0.5764230062376778, 0.427971750497818, 0.3059470240237578, 0.2705033138956664, 0.22640614085040003, 0.20400593247053758, 0.18908430860852296, 0.1867751549437361, 0.22644610182856614, 0.1711239956741063, 0.17023062713022502, 0.16873910235908796, 0.16314085889256225, 0.18057663253736947, 0.18319866173672225, 0.16882260192958815, 0.15975779625323583, 0.16009999980341713, 0.1569128247364512, 0.1532117802438871, 0.15336585860207397, 0.15367465206193473, 0.1512298309156355, 0.15128615864042966, 0.1500496631663925, 0.15089197358432807, 0.1504723774093502, 0.1487876983746043, 0.14837854461006397, 0.15056845981557415, 0.1473764493920893, 0.14946909607300218, 0.14782851653279, 0.14649816736016633, 0.14534544312166717, 0.14734344514754583, 0.1453088866371029, 0.15044820132964062, 0.1587110750096024, 0.14561127505774768, 0.1447925610502936, 0.1447221615685607, 0.144819901096371, 0.14491354927139463]}
dice_scores:{'train': [0.3673882, 0.69781125, 0.7232426, 0.7145156, 0.74999017, 0.7709595, 0.76848716, 0.79101795, 0.81947726, 0.8233173, 0.836089, 0.8420138, 0.8461039, 0.84585035, 0.8531216, 0.85358727, 0.8547063, 0.85985005, 0.8596899, 0.86443615, 0.8575246, 0.8627035, 0.87035936, 0.8734582, 0.87545717, 0.8766143, 0.87731934, 0.8778706, 0.87813425, 0.8793729, 0.88010013, 0.8798209, 0.88094157, 0.8816297, 0.88170797, 0.8826375, 0.882856, 0.8835669, 0.883349, 0.884405, 0.8842498, 0.8850196, 0.8859723, 0.88614386, 0.88610744, 0.8852473, 0.88781697, 0.8881682, 0.888496, 0.88858575], 'val': [0.7471408, 0.70814514, 0.70032734, 0.76652116, 0.76627773, 0.7416325, 0.8061639, 0.8101759, 0.8250815, 0.8249707, 0.8396475, 0.8473154, 0.8515336, 0.84904194, 0.8100275, 0.85571486, 0.8554116, 0.8548002, 0.8589965, 0.8406959, 0.8386608, 0.8505136, 0.8592317, 0.8588556, 0.8617031, 0.86499566, 0.86476964, 0.86452025, 0.8666709, 0.86654836, 0.86770135, 0.86680937, 0.8671897, 0.8686068, 0.86892897, 0.86666805, 0.86969006, 0.86761516, 0.8689776, 0.870155, 0.8712148, 0.8691294, 0.87103975, 0.8660351, 0.85819143, 0.8704301, 0.8711717, 0.8712418, 0.87113327, 0.87105185]}
jaccard_scores:{'train': [0.27370822, 0.57102114, 0.5981798, 0.59062165, 0.6279243, 0.6547573, 0.6543813, 0.68164074, 0.7132307, 0.7175469, 0.7341522, 0.7424189, 0.74590784, 0.74669147, 0.7569897, 0.7564441, 0.7581303, 0.7664653, 0.7640871, 0.77188164, 0.7617973, 0.7699192, 0.7808708, 0.7844336, 0.78675675, 0.7884263, 0.7895679, 0.79028994, 0.7907407, 0.7923617, 0.7932992, 0.79284936, 0.7943115, 0.79540116, 0.795462, 0.796548, 0.7967921, 0.7976915, 0.79792386, 0.7992303, 0.79898447, 0.80006945, 0.8014389, 0.8016491, 0.80127, 0.80049884, 0.80392164, 0.8045132, 0.80493927, 0.8050773], 'val': [0.61962694, 0.5786099, 0.5685147, 0.64824724, 0.6455502, 0.6205011, 0.69386077, 0.6973424, 0.71913403, 0.71398395, 0.73354125, 0.74507105, 0.75000304, 0.74751496, 0.6942199, 0.75849485, 0.7571442, 0.7550719, 0.76160616, 0.7365857, 0.73285145, 0.7515662, 0.7628367, 0.7619362, 0.7659926, 0.770945, 0.7704191, 0.76988775, 0.773122, 0.7728255, 0.77441794, 0.7730037, 0.7735447, 0.775865, 0.77594477, 0.77324224, 0.7770243, 0.7744057, 0.7763696, 0.7781837, 0.7795837, 0.77673405, 0.7794411, 0.77194524, 0.76034594, 0.77801126, 0.7791773, 0.7793259, 0.7791909, 0.7790864]}
