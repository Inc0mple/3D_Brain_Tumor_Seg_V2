device:cuda
display_plot:True
net:UNet3d(
  (conv): DoubleConv(
    (double_conv): Sequential(
      (0): Conv3d(4, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (1): GroupNorm(8, 24, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): Conv3d(24, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (4): GroupNorm(8, 24, eps=1e-05, affine=True)
      (5): ReLU(inplace=True)
    )
  )
  (enc1): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(24, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 48, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(48, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 48, eps=1e-05, affine=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  (enc2): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(48, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 96, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(96, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 96, eps=1e-05, affine=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  (enc3): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(96, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 192, eps=1e-05, affine=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  (enc4): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 192, eps=1e-05, affine=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  (dec1): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(384, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 96, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(96, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 96, eps=1e-05, affine=True)
        (5): ReLU(inplace=True)
      )
    )
  )
  (dec2): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(192, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 48, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(48, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 48, eps=1e-05, affine=True)
        (5): ReLU(inplace=True)
      )
    )
  )
  (dec3): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(96, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(24, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 24, eps=1e-05, affine=True)
        (5): ReLU(inplace=True)
      )
    )
  )
  (dec4): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(48, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(24, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 24, eps=1e-05, affine=True)
        (5): ReLU(inplace=True)
      )
    )
  )
  (out): Out(
    (conv): Conv3d(24, 3, kernel_size=(1, 1, 1), stride=(1, 1, 1))
  )
)
criterion:BCEDiceLoss(
  (bce): BCEWithLogitsLoss()
  (dice): DiceLoss()
)
optimizer:AdamW (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    eps: 1e-08
    foreach: None
    lr: 5e-05
    maximize: False
    weight_decay: 0.01
)
scheduler:<torch.optim.lr_scheduler.ReduceLROnPlateau object at 0x7f3b7876e2e0>
accumulation_steps:4
phases:['train', 'val']
num_epochs:50
dataloaders:{'train': <torch.utils.data.dataloader.DataLoader object at 0x7f3b7880fdf0>, 'val': <torch.utils.data.dataloader.DataLoader object at 0x7f3b7880f670>, 'test': <torch.utils.data.dataloader.DataLoader object at 0x7f3b7880f580>}
best_loss:0.1640469803000396
losses:{'train': [1.3830039990718828, 1.241257964884827, 1.1367773465783877, 1.0508753201807406, 0.9696793556213379, 0.8763915143992058, 0.765408385162571, 0.6426250942533007, 0.5019994299334718, 0.39185124380733577, 0.32643715782310573, 0.2825990243046456, 0.2651109775889509, 0.253343034408165, 0.24137254759046062, 0.22532526397999703, 0.22894446092866672, 0.21323715470476295, 0.20625636638797282, 0.197737234201948, 0.1924057713649572, 0.19130701075941892, 0.18526371256820148, 0.18173388819504147, 0.1803900095928078, 0.18059157591468936, 0.17247493876703793, 0.17831422948055395, 0.1713294435023355, 0.16074787316836786, 0.1585404975870943, 0.157272825407098, 0.15568958127963226, 0.15518350919049956, 0.1545190277718319, 0.15390926418195658, 0.15302900723518073, 0.15253453744228349, 0.15244850941257332, 0.1519718239997503, 0.15156621946298124, 0.15047577707656437, 0.14982761975250317, 0.1492617264984905, 0.1492462106219036, 0.14944516949553907, 0.14843121935886122, 0.1482684411561761, 0.14722100269941776, 0.1468044076214045], 'val': [1.300986962498359, 1.1847849971843216, 1.0902003792096984, 1.0098275677213129, 0.9250518398464851, 0.8226001498834142, 0.7158966902292, 0.5925425274192162, 0.43163815815493745, 0.3582456612362052, 0.3038959177035206, 0.2637167475977034, 0.2514141944219481, 0.25576159034697515, 0.2749383933139297, 0.22811840938509637, 0.23896692398021807, 0.20542668986995266, 0.19844166765797813, 0.19609017107846602, 0.22029502549261418, 0.21160603553619026, 0.19397775125953387, 0.19202690360681066, 0.19076266617707485, 0.19923370654852884, 0.21237948663392156, 0.20209894807271236, 0.17729537898920616, 0.17511969390061666, 0.17357823421370308, 0.17274240193501958, 0.17271484329171902, 0.16963065064178323, 0.17137373548071339, 0.16949101973254727, 0.16952094168595547, 0.16822927951250435, 0.16965027216751621, 0.16790844394632107, 0.1674811582801477, 0.1680355944301722, 0.16593653708696365, 0.17044454391272562, 0.17649150541368522, 0.16565939495867155, 0.1653632863231425, 0.16479971027880344, 0.1640469803000396, 0.16509275546051422]}
dice_scores:{'train': [0.34784442, 0.58794403, 0.61650723, 0.6113818, 0.59985095, 0.6269199, 0.6591857, 0.67268157, 0.72631276, 0.76259923, 0.77910984, 0.79677075, 0.79575866, 0.7969074, 0.8021087, 0.8120903, 0.80432487, 0.817393, 0.82178307, 0.82729226, 0.831054, 0.83073604, 0.8357966, 0.8383037, 0.8387363, 0.8380879, 0.845064, 0.83908653, 0.8452653, 0.8553124, 0.85747004, 0.8585928, 0.86012334, 0.8605442, 0.8611232, 0.86172557, 0.8625479, 0.8630806, 0.863019, 0.86349916, 0.8638038, 0.86475885, 0.8653556, 0.86589575, 0.8657762, 0.86554253, 0.8664235, 0.8666279, 0.86757, 0.8678866], 'val': [0.6108096, 0.6088053, 0.62914264, 0.6167085, 0.5965742, 0.6156717, 0.6741422, 0.6949974, 0.7475987, 0.7756972, 0.7830956, 0.80164814, 0.80259, 0.78968334, 0.7658019, 0.8047344, 0.79132867, 0.8215836, 0.8263669, 0.82739985, 0.80253726, 0.8098738, 0.8259049, 0.8271007, 0.8281606, 0.81868184, 0.8069805, 0.8159571, 0.8389137, 0.8410491, 0.84251064, 0.8431651, 0.843277, 0.8463479, 0.8447478, 0.84653574, 0.84642965, 0.84780097, 0.8465216, 0.84801006, 0.84830624, 0.84796864, 0.8498689, 0.8452878, 0.8397176, 0.8499329, 0.8502801, 0.85070413, 0.85122937, 0.8507091]}
jaccard_scores:{'train': [0.23480734, 0.43645886, 0.46574304, 0.45987642, 0.44652462, 0.474924, 0.5149371, 0.53111714, 0.59270334, 0.6330797, 0.65494186, 0.67539126, 0.67496055, 0.67822254, 0.68396264, 0.69518846, 0.6856553, 0.7030305, 0.7066945, 0.71633124, 0.72069037, 0.7201375, 0.72729826, 0.73023933, 0.730538, 0.73033565, 0.73878294, 0.7316973, 0.73985744, 0.7534147, 0.75655305, 0.7581689, 0.7603511, 0.7609431, 0.7618512, 0.7626698, 0.7638697, 0.7646813, 0.76473427, 0.76529276, 0.7658543, 0.76723677, 0.76808035, 0.7688853, 0.7686259, 0.7684731, 0.7696918, 0.7700288, 0.77127516, 0.77176136], 'val': [0.45290565, 0.45643193, 0.47559425, 0.4611259, 0.4395992, 0.46308565, 0.52665377, 0.5499938, 0.6120528, 0.6497568, 0.6611956, 0.68297327, 0.68445164, 0.66756946, 0.63842124, 0.68857145, 0.67136765, 0.7088969, 0.7136237, 0.7177865, 0.6832658, 0.69409287, 0.7145976, 0.7170936, 0.71701217, 0.7048162, 0.6884368, 0.7004603, 0.7317597, 0.7346713, 0.7365618, 0.73750657, 0.73772603, 0.74181014, 0.739915, 0.7423061, 0.74223506, 0.74414146, 0.7421892, 0.74438363, 0.7448306, 0.7445554, 0.74699473, 0.7405462, 0.73334575, 0.7471802, 0.7476339, 0.7481329, 0.74877554, 0.7479407]}
