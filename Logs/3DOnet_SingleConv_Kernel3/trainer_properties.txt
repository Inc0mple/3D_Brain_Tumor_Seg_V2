device:cuda
display_plot:True
net:ONet3d_v2(
  (conv): DoubleConvTwoOut(
    (DoubleConvTwoOut): Sequential(
      (0): Conv3d(4, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (1): GroupNorm(8, 24, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): Conv3d(24, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (4): GroupNorm(8, 24, eps=1e-05, affine=True)
      (5): ReLU(inplace=True)
    )
  )
  (enc1_bot): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(24, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 48, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (enc2_bot): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(48, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 96, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (enc3_bot): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(96, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (enc4_bot): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (enc1_top): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(24, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 48, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (enc2_top): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(48, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 96, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (enc3_top): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(96, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (enc4_top): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (dec1_bot): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(384, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 96, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (dec2_bot): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(192, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 48, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (dec3_bot): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(96, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (dec4_bot): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(48, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (dec1_top): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(384, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 96, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (dec2_top): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(192, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 48, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (dec3_top): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(96, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (dec4_top): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(48, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (before_out): BeforeOut(
    (mergeConv): Sequential(
      (0): Conv3d(48, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (1): GroupNorm(8, 24, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
    )
  )
  (out): Out(
    (conv): Conv3d(24, 3, kernel_size=(1, 1, 1), stride=(1, 1, 1))
  )
)
criterion:BCEDiceLoss(
  (bce): BCEWithLogitsLoss()
  (dice): DiceLoss()
)
optimizer:Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: False
    lr: 5e-06
    maximize: False
    weight_decay: 0
)
scheduler:<torch.optim.lr_scheduler.ReduceLROnPlateau object at 0x7f9fbe191b50>
accumulation_steps:4
phases:['train', 'val']
num_epochs:50
dataloaders:{'train': <torch.utils.data.dataloader.DataLoader object at 0x7f9fbbb9d400>, 'val': <torch.utils.data.dataloader.DataLoader object at 0x7f9fbbb9ddc0>, 'test': <torch.utils.data.dataloader.DataLoader object at 0x7f9fbbb9db20>}
best_loss:0.1624483659441741
losses:{'train': [1.3971244246334178, 1.2551429185577219, 1.1516044647521393, 1.0731010262503824, 1.0095633875734453, 0.9504522259697714, 0.8915807661448142, 0.8235945948629778, 0.7540168746342677, 0.689253364452391, 0.6190051690253922, 0.4471898048322917, 0.3445357806102405, 0.2966674454651858, 0.29108688660220955, 0.2654784934262359, 0.23860940266358083, 0.2217496408029201, 0.20738250198473043, 0.2099005428387185, 0.19593217144560904, 0.19065191727060782, 0.18782511585792208, 0.1725086631827028, 0.1688342636075763, 0.16773858371796263, 0.16500306319261232, 0.160805656797759, 0.15612379356708816, 0.1529275754842015, 0.15366354420384526, 0.14043769254543936, 0.1368634294109426, 0.13443425912480844, 0.13301035962970537, 0.13148808755518818, 0.1298453790125058, 0.12892742616482109, 0.12829337199661214, 0.1271683315927085, 0.12585525094272973, 0.12496615215399419, 0.12463980413151785, 0.12357594745637346, 0.1229487403150747, 0.12251681442099832, 0.12192342261794402, 0.11995123627067972, 0.11963248043232544, 0.11944193193271133], 'val': [1.31904436507315, 1.1985570169844717, 1.1113050816194066, 1.0405490297191549, 0.9821848048354095, 0.9210822008690744, 0.8630604845172954, 0.7844092576008923, 0.712591512023278, 0.6649708151817322, 0.5099463311006438, 0.40340002696469146, 0.3569483135668737, 0.286660318104726, 0.3092163812439397, 0.25465858193500984, 0.23988813372715465, 0.22821093308475782, 0.22211288112514424, 0.2181873232969698, 0.21840175156885722, 0.2151936687669664, 0.20147982141319312, 0.19365714645048357, 0.19700756528467503, 0.18979675322771072, 0.18656618316780846, 0.1908114676205617, 0.1875569811969433, 0.19990583804418455, 0.17098185560613308, 0.16725331826030082, 0.16574513933287477, 0.16596663553478583, 0.16565456424119337, 0.1658209665625725, 0.1660187730811677, 0.16528771248347354, 0.1648436537328756, 0.16453555134950942, 0.16526469103289101, 0.16482626414805088, 0.16413797649010173, 0.16343212183916345, 0.1665699488290076, 0.1656187966747104, 0.16413699378663638, 0.16293531860101898, 0.16247559373952308, 0.1624483659441741]}
dice_scores:{'train': [0.42105302, 0.5630951, 0.62336135, 0.6679892, 0.60852015, 0.62267977, 0.5996599, 0.55647075, 0.51190495, 0.49304652, 0.6090247, 0.6854851, 0.778473, 0.7884975, 0.77494705, 0.7922623, 0.81466955, 0.82739156, 0.8362616, 0.8283593, 0.83834475, 0.8397578, 0.8421003, 0.8534145, 0.85522974, 0.85526067, 0.85644805, 0.85969466, 0.8633914, 0.865907, 0.8648281, 0.8769906, 0.8802887, 0.8825736, 0.8838739, 0.8853196, 0.8868493, 0.8875338, 0.88815933, 0.889194, 0.8903491, 0.8911265, 0.8913471, 0.89232194, 0.8928647, 0.89320946, 0.893675, 0.8956027, 0.8958148, 0.89600796], 'val': [0.35238284, 0.5900733, 0.60498625, 0.6563071, 0.62285095, 0.6280931, 0.5114139, 0.5072928, 0.52106106, 0.58240014, 0.65558404, 0.7406539, 0.7379428, 0.78455603, 0.74700767, 0.7955485, 0.80821145, 0.8162045, 0.8162085, 0.8177384, 0.81209636, 0.818836, 0.8248588, 0.8309363, 0.82742715, 0.8336982, 0.835567, 0.83027256, 0.8335898, 0.821563, 0.8484095, 0.8515617, 0.8526614, 0.8523529, 0.8524475, 0.85226846, 0.8522293, 0.8527838, 0.8533034, 0.8533323, 0.85272205, 0.853073, 0.8536016, 0.8543482, 0.85133976, 0.85202974, 0.8535278, 0.8546496, 0.85506254, 0.8550908]}
jaccard_scores:{'train': [0.29168823, 0.40907568, 0.46888712, 0.51664835, 0.4517912, 0.4640149, 0.44105798, 0.3963083, 0.3560417, 0.3388019, 0.4504546, 0.53263676, 0.6504463, 0.66338825, 0.64819443, 0.66949815, 0.699167, 0.71482587, 0.7263956, 0.7160641, 0.7309909, 0.7320546, 0.73489344, 0.75112766, 0.7538539, 0.75380504, 0.7558166, 0.7605164, 0.7654675, 0.76960385, 0.76831156, 0.78583455, 0.79050356, 0.79400575, 0.79595006, 0.7981122, 0.8004033, 0.8013757, 0.80229115, 0.80392057, 0.8056449, 0.80691373, 0.80723214, 0.80870634, 0.80958605, 0.81011057, 0.81083184, 0.8138304, 0.8141723, 0.8144795], 'val': [0.23547375, 0.43514517, 0.44883657, 0.5024263, 0.4642348, 0.46904665, 0.35441348, 0.34731576, 0.35877702, 0.42247042, 0.49884635, 0.60598314, 0.60994637, 0.66125745, 0.6159065, 0.6749619, 0.69035935, 0.700608, 0.70166594, 0.70242995, 0.69600236, 0.7054271, 0.71289295, 0.72349524, 0.719171, 0.7256913, 0.729073, 0.72121423, 0.72641265, 0.7088502, 0.74622035, 0.7510838, 0.7525742, 0.7523651, 0.7527747, 0.7523516, 0.752016, 0.753256, 0.7541833, 0.7539833, 0.75339013, 0.75389344, 0.7546544, 0.75560063, 0.75176173, 0.75275755, 0.75474936, 0.75614697, 0.7566903, 0.75675756]}
last_completed_run_time:14:10:39.161235
parameter_count:6025827
