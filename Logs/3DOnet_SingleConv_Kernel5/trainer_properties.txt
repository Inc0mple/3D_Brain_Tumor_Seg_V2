device:cuda
display_plot:True
net:ONet3d(
  (conv): DoubleConvTwoOut(
    (DoubleConvTwoOut): Sequential(
      (0): Conv3d(4, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (1): GroupNorm(8, 24, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): Conv3d(24, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (4): GroupNorm(8, 24, eps=1e-05, affine=True)
      (5): ReLU(inplace=True)
    )
  )
  (enc1_bot): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(24, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 48, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (enc2_bot): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(48, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 96, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (enc3_bot): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(96, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (enc4_bot): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (enc1_top): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(24, 48, kernel_size=(5, 5, 5), stride=(1, 1, 1), padding=(2, 2, 2))
          (1): GroupNorm(8, 48, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (enc2_top): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(48, 96, kernel_size=(5, 5, 5), stride=(1, 1, 1), padding=(2, 2, 2))
          (1): GroupNorm(8, 96, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (enc3_top): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(96, 192, kernel_size=(5, 5, 5), stride=(1, 1, 1), padding=(2, 2, 2))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (enc4_top): DownSingle(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): SingleConv(
        (single_conv): Sequential(
          (0): Conv3d(192, 192, kernel_size=(5, 5, 5), stride=(1, 1, 1), padding=(2, 2, 2))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (dec1_bot): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(384, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 96, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (dec2_bot): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(192, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 48, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (dec3_bot): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(96, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (dec4_bot): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(48, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (dec1_top): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(384, 96, kernel_size=(5, 5, 5), stride=(1, 1, 1), padding=(2, 2, 2))
        (1): GroupNorm(8, 96, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (dec2_top): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(192, 48, kernel_size=(5, 5, 5), stride=(1, 1, 1), padding=(2, 2, 2))
        (1): GroupNorm(8, 48, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (dec3_top): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(96, 24, kernel_size=(5, 5, 5), stride=(1, 1, 1), padding=(2, 2, 2))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (dec4_top): UpSingle(
    (upSingle): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): SingleConv(
      (single_conv): Sequential(
        (0): Conv3d(48, 24, kernel_size=(5, 5, 5), stride=(1, 1, 1), padding=(2, 2, 2))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  (before_out): BeforeOut(
    (mergeConv): Sequential(
      (0): Conv3d(48, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (1): GroupNorm(8, 24, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
    )
  )
  (out): Out(
    (conv): Conv3d(24, 3, kernel_size=(1, 1, 1), stride=(1, 1, 1))
  )
)
criterion:BCEDiceLoss(
  (bce): BCEWithLogitsLoss()
  (dice): DiceLoss()
)
optimizer:Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: False
    lr: 5.000000000000001e-08
    maximize: False
    weight_decay: 0
)
scheduler:<torch.optim.lr_scheduler.ReduceLROnPlateau object at 0x7fccf1032fa0>
accumulation_steps:4
phases:['train', 'val']
num_epochs:50
dataloaders:{'train': <torch.utils.data.dataloader.DataLoader object at 0x7fcceab9c700>, 'val': <torch.utils.data.dataloader.DataLoader object at 0x7fcceab9c8e0>, 'test': <torch.utils.data.dataloader.DataLoader object at 0x7fcceab9c970>}
best_loss:0.15742297934473687
losses:{'train': [1.4007058914170065, 1.2557843293527233, 1.1487464161426848, 1.0544796230221882, 0.9680763229217819, 0.8797271865855605, 0.7778777486924436, 0.653299061291118, 0.526079775149378, 0.41610539135144237, 0.34872556882892725, 0.30039289080938003, 0.2751943315503262, 0.27217013465360995, 0.23924392620420273, 0.22652787936164398, 0.2214107383113397, 0.2089209787745893, 0.19712382342538906, 0.19152644775212943, 0.18297850380265668, 0.18600253885463164, 0.1865811430965993, 0.18539633361105684, 0.1806324560464335, 0.17823945583612746, 0.16549300908079165, 0.16362883207235954, 0.1588638804626329, 0.17804862031918514, 0.16291842751289956, 0.1586416703808217, 0.150207402899918, 0.15593381805394993, 0.1483383772915987, 0.14818813446413429, 0.14073273735014658, 0.13237353927055692, 0.12744423400029936, 0.12610065693411085, 0.12464274604850849, 0.12396456126987708, 0.12249694015306666, 0.12229392303600058, 0.12224059442886835, 0.12201730340379273, 0.1220074321352257, 0.12200507490467209, 0.12198037325542689, 0.12198017489434194], 'val': [1.3133184325020268, 1.2043789850091033, 1.1016627370186571, 1.0122747297556896, 0.9283851744993677, 0.8306380105468462, 0.7189674051302783, 0.5780987632724474, 0.46888900028084807, 0.365149957110297, 0.3534188304307326, 0.27118738248663127, 0.2512881024828497, 0.25312254324836553, 0.23358419270447964, 0.22625817611532392, 0.21927675393954763, 0.21005855739678977, 0.2003343750564557, 0.1864772135356687, 0.19493276485294667, 0.2040044756711654, 0.18513518782719127, 0.18737889193701293, 0.1899987317199977, 0.18297530724754874, 0.17430699152766532, 0.18039251217302285, 0.1740488052930472, 0.19379840566302245, 0.19033477848993158, 0.16590341693668995, 0.17964407773512714, 0.1657746248650101, 0.1716521843424383, 0.16726897600686774, 0.1766006352625928, 0.15925406495917518, 0.15742297934473687, 0.1578870861316627, 0.16172550372638791, 0.15951462968621613, 0.15873446146834572, 0.15858835495024357, 0.15843595395672996, 0.1584399678515938, 0.15846358309939224, 0.15843510803467822, 0.1584421588143088, 0.15844574050520951]}
dice_scores:{'train': [0.39509383, 0.596543, 0.5881497, 0.5846676, 0.5955032, 0.61430943, 0.6527422, 0.7194824, 0.75145036, 0.778308, 0.787012, 0.79997927, 0.8027868, 0.7930853, 0.81368285, 0.82091206, 0.8210263, 0.8290665, 0.8377134, 0.8401895, 0.8460737, 0.84219664, 0.84005004, 0.8404911, 0.84409565, 0.8452767, 0.85600007, 0.8583051, 0.86147135, 0.8429642, 0.8568445, 0.8603072, 0.8678548, 0.8627379, 0.8690859, 0.8690258, 0.8756215, 0.8830548, 0.88752407, 0.888884, 0.8902858, 0.8909092, 0.89222425, 0.8924595, 0.89248717, 0.8927354, 0.8927438, 0.89275324, 0.89277434, 0.8927729], 'val': [0.61781824, 0.6386281, 0.6029201, 0.6024849, 0.63643605, 0.61117077, 0.6570216, 0.7293392, 0.7343995, 0.7848143, 0.759972, 0.8128816, 0.8148338, 0.8008791, 0.8132522, 0.81539476, 0.81941503, 0.82653, 0.83093464, 0.8422109, 0.8314477, 0.8233883, 0.83918935, 0.83717275, 0.8336969, 0.83960664, 0.84649134, 0.84201133, 0.84584576, 0.82815415, 0.8307045, 0.8539077, 0.8402272, 0.85370404, 0.8474621, 0.8512763, 0.842602, 0.8578561, 0.85961914, 0.859118, 0.8552579, 0.8573856, 0.8581723, 0.85830027, 0.8584735, 0.85846233, 0.8584384, 0.858464, 0.85845715, 0.8584519]}
jaccard_scores:{'train': [0.2780014, 0.44475082, 0.43422842, 0.43033436, 0.44174054, 0.4606062, 0.5025391, 0.58322793, 0.6223032, 0.6533443, 0.66433764, 0.67957044, 0.6827491, 0.67287433, 0.6976793, 0.70672095, 0.70593446, 0.71574825, 0.7280967, 0.7319652, 0.739851, 0.7348122, 0.7321862, 0.73329425, 0.73807746, 0.73957366, 0.75477666, 0.7577676, 0.76220757, 0.7377179, 0.75609773, 0.76095045, 0.771834, 0.7647476, 0.77357286, 0.77338517, 0.7837986, 0.79467404, 0.8014123, 0.8035727, 0.8056158, 0.8066503, 0.8087062, 0.8090405, 0.8090992, 0.8094545, 0.80946714, 0.8094778, 0.8095117, 0.8095098], 'val': [0.4623292, 0.48391548, 0.44648424, 0.4482685, 0.48082262, 0.454942, 0.507662, 0.5969314, 0.60071474, 0.6625995, 0.6248156, 0.6970397, 0.70060414, 0.6832483, 0.6969941, 0.699265, 0.70243967, 0.7137712, 0.7200336, 0.7348745, 0.72108, 0.70972556, 0.73210275, 0.7290396, 0.7245778, 0.73236054, 0.7432628, 0.73710465, 0.74171734, 0.718793, 0.72474116, 0.75399697, 0.73630756, 0.75266254, 0.74424756, 0.7502799, 0.7385042, 0.7604539, 0.76312506, 0.7625657, 0.7577458, 0.7605287, 0.7615943, 0.7617507, 0.7619919, 0.76198095, 0.7619496, 0.7619819, 0.76197326, 0.7619674]}
last_completed_run_time:10:01:18.950033
parameter_count:16863843