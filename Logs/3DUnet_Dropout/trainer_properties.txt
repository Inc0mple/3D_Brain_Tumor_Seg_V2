device:cuda
display_plot:True
net:UNet3dDropout(
  (conv): DoubleConvDropout(
    (double_conv): Sequential(
      (0): Conv3d(4, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (1): GroupNorm(8, 24, eps=1e-05, affine=True)
      (2): Dropout(p=0.2, inplace=False)
      (3): ReLU(inplace=True)
      (4): Conv3d(24, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (5): GroupNorm(8, 24, eps=1e-05, affine=True)
      (6): Dropout(p=0.2, inplace=False)
      (7): ReLU(inplace=True)
    )
  )
  (enc1): DownDropout(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConvDropout(
        (double_conv): Sequential(
          (0): Conv3d(24, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 48, eps=1e-05, affine=True)
          (2): Dropout(p=0.2, inplace=False)
          (3): ReLU(inplace=True)
          (4): Conv3d(48, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (5): GroupNorm(8, 48, eps=1e-05, affine=True)
          (6): Dropout(p=0.2, inplace=False)
          (7): ReLU(inplace=True)
        )
      )
    )
  )
  (enc2): DownDropout(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConvDropout(
        (double_conv): Sequential(
          (0): Conv3d(48, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 96, eps=1e-05, affine=True)
          (2): Dropout(p=0.2, inplace=False)
          (3): ReLU(inplace=True)
          (4): Conv3d(96, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (5): GroupNorm(8, 96, eps=1e-05, affine=True)
          (6): Dropout(p=0.2, inplace=False)
          (7): ReLU(inplace=True)
        )
      )
    )
  )
  (enc3): DownDropout(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConvDropout(
        (double_conv): Sequential(
          (0): Conv3d(96, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): Dropout(p=0.2, inplace=False)
          (3): ReLU(inplace=True)
          (4): Conv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (5): GroupNorm(8, 192, eps=1e-05, affine=True)
          (6): Dropout(p=0.2, inplace=False)
          (7): ReLU(inplace=True)
        )
      )
    )
  )
  (enc4): DownDropout(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConvDropout(
        (double_conv): Sequential(
          (0): Conv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): Dropout(p=0.2, inplace=False)
          (3): ReLU(inplace=True)
          (4): Conv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (5): GroupNorm(8, 192, eps=1e-05, affine=True)
          (6): Dropout(p=0.2, inplace=False)
          (7): ReLU(inplace=True)
        )
      )
    )
  )
  (dec1): UpDropout(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConvDropout(
      (double_conv): Sequential(
        (0): Conv3d(384, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 96, eps=1e-05, affine=True)
        (2): Dropout(p=0.2, inplace=False)
        (3): ReLU(inplace=True)
        (4): Conv3d(96, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (5): GroupNorm(8, 96, eps=1e-05, affine=True)
        (6): Dropout(p=0.2, inplace=False)
        (7): ReLU(inplace=True)
      )
    )
  )
  (dec2): UpDropout(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConvDropout(
      (double_conv): Sequential(
        (0): Conv3d(192, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 48, eps=1e-05, affine=True)
        (2): Dropout(p=0.2, inplace=False)
        (3): ReLU(inplace=True)
        (4): Conv3d(48, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (5): GroupNorm(8, 48, eps=1e-05, affine=True)
        (6): Dropout(p=0.2, inplace=False)
        (7): ReLU(inplace=True)
      )
    )
  )
  (dec3): UpDropout(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConvDropout(
      (double_conv): Sequential(
        (0): Conv3d(96, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): Dropout(p=0.2, inplace=False)
        (3): ReLU(inplace=True)
        (4): Conv3d(24, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (5): GroupNorm(8, 24, eps=1e-05, affine=True)
        (6): Dropout(p=0.2, inplace=False)
        (7): ReLU(inplace=True)
      )
    )
  )
  (dec4): UpDropout(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConvDropout(
      (double_conv): Sequential(
        (0): Conv3d(48, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): Dropout(p=0.2, inplace=False)
        (3): ReLU(inplace=True)
        (4): Conv3d(24, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (5): GroupNorm(8, 24, eps=1e-05, affine=True)
        (6): Dropout(p=0.2, inplace=False)
        (7): ReLU(inplace=True)
      )
    )
  )
  (out): Out(
    (conv): Conv3d(24, 3, kernel_size=(1, 1, 1), stride=(1, 1, 1))
  )
)
criterion:BCEDiceLoss(
  (bce): BCEWithLogitsLoss()
  (dice): DiceLoss()
)
optimizer:Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: False
    lr: 5e-05
    maximize: False
    weight_decay: 0
)
scheduler:<torch.optim.lr_scheduler.ReduceLROnPlateau object at 0x7fb4d8929df0>
accumulation_steps:4
phases:['train', 'val']
num_epochs:50
dataloaders:{'train': <torch.utils.data.dataloader.DataLoader object at 0x7fb4d053f9a0>, 'val': <torch.utils.data.dataloader.DataLoader object at 0x7fb4d053f340>, 'test': <torch.utils.data.dataloader.DataLoader object at 0x7fb4d053f2e0>}
best_loss:0.16896464211760825
losses:{'train': [1.382647401932981, 1.240178852480174, 1.1325530090259508, 1.0457860974757844, 0.961663720725607, 0.8764109797350808, 0.783478656195869, 0.6887473250976534, 0.5825516819500651, 0.4761783033042806, 0.4053380519944905, 0.35728824948856586, 0.3350387247343027, 0.29863557089190973, 0.2860386883804553, 0.27001429425672885, 0.26440345127659604, 0.2550967945912038, 0.23803116763612617, 0.23232679493980263, 0.230517265517902, 0.22773349619410338, 0.21477521930470667, 0.20868197706715688, 0.2063249431465515, 0.20485665419709093, 0.2037268233673201, 0.20382582308448313, 0.20142506261288892, 0.20022740002594067, 0.19874988779595595, 0.19794237528690367, 0.19618965441736433, 0.19510841199653683, 0.1937982306564262, 0.19234635357961002, 0.19120314113880746, 0.1894879757848076, 0.1884741925071401, 0.1879618793102725, 0.18697512977023542, 0.18464837557576003, 0.1835469842636993, 0.18270445320429457, 0.18174606153720232, 0.18100890256606128, 0.1794452253346661, 0.1785210480651475, 0.17674991763250003, 0.17619548403718172], 'val': [1.2860929156249423, 1.169873300588356, 1.0695050336279959, 0.9822038220909407, 0.889578160249962, 0.7876131062237721, 0.7105822090832692, 0.6117877437258666, 0.4292870231394498, 0.34598911511448194, 0.29033360475639125, 0.29835944524351155, 0.24482699188421359, 0.2156689515653646, 0.24752128588141137, 0.21936921452013952, 0.21024743031780674, 0.20520598216439193, 0.19378412796078986, 0.21931766676452924, 0.19844538690346591, 0.20436714631768893, 0.19061374636191242, 0.18799467722199997, 0.18590643917614558, 0.18374467739519082, 0.18417737562701386, 0.1826370172905472, 0.18219110004182132, 0.18106879603187992, 0.1809795210665127, 0.17951850635263156, 0.1784451110464222, 0.1790213702984576, 0.17887173340005694, 0.17732606814155039, 0.1762428436920328, 0.17583108693361282, 0.17527755813778573, 0.17357553808756596, 0.17302337246683408, 0.1733085835036242, 0.17330355014441148, 0.17163766484777881, 0.17752703996199481, 0.17186968056660779, 0.16968003674498144, 0.17155288806501426, 0.16896464211760825, 0.1701055256263265]}
dice_scores:{'train': [0.24876705, 0.54078233, 0.60641307, 0.601789, 0.6152007, 0.6343787, 0.64350826, 0.65079933, 0.69622844, 0.74392503, 0.7625799, 0.7725477, 0.7686788, 0.789154, 0.78882384, 0.796964, 0.7955015, 0.7988083, 0.8121766, 0.8137734, 0.8131099, 0.81408435, 0.825159, 0.8309883, 0.83318216, 0.8346044, 0.83545655, 0.83521044, 0.83719426, 0.83814013, 0.8393537, 0.8397948, 0.84125817, 0.8420173, 0.84299946, 0.8442059, 0.8451741, 0.8465487, 0.8471128, 0.84738535, 0.8480495, 0.8498786, 0.85063374, 0.85124165, 0.8517969, 0.85232854, 0.8534024, 0.8540726, 0.85533357, 0.85582566], 'val': [0.61364317, 0.5773894, 0.617518, 0.606585, 0.6101647, 0.61865485, 0.70068884, 0.68149257, 0.76001763, 0.78367054, 0.7946482, 0.7689024, 0.80229163, 0.82434577, 0.7872595, 0.81249994, 0.8208682, 0.8221085, 0.8314779, 0.80714965, 0.8247468, 0.8183216, 0.83086, 0.83318883, 0.83511066, 0.83708674, 0.8365708, 0.83798766, 0.83820724, 0.83918196, 0.8391806, 0.8403928, 0.8412587, 0.8405334, 0.8405602, 0.84192806, 0.8428542, 0.84310156, 0.84346414, 0.84478563, 0.84526306, 0.84493244, 0.8447246, 0.8463216, 0.8407475, 0.84588563, 0.84779614, 0.8458886, 0.84834427, 0.8472348]}
jaccard_scores:{'train': [0.15561907, 0.38808972, 0.45026723, 0.44645146, 0.46022284, 0.47977236, 0.49003983, 0.5035614, 0.55210316, 0.6074517, 0.6298594, 0.641779, 0.6366181, 0.6614389, 0.66201425, 0.67182636, 0.66968644, 0.67390937, 0.692787, 0.6936592, 0.69271946, 0.6953154, 0.7091773, 0.717148, 0.7202571, 0.722279, 0.7234577, 0.7231182, 0.72593576, 0.7273643, 0.72900647, 0.72969514, 0.7317572, 0.7328788, 0.73406446, 0.736021, 0.73741436, 0.73949, 0.740296, 0.74075454, 0.7417763, 0.74430233, 0.74534726, 0.74620485, 0.746853, 0.7478755, 0.7493598, 0.75034636, 0.7519274, 0.7527538], 'val': [0.45899498, 0.42582986, 0.46128485, 0.45169643, 0.45528787, 0.46370038, 0.5559533, 0.53387403, 0.63094187, 0.6586764, 0.6704691, 0.63816893, 0.6808984, 0.7096049, 0.66176677, 0.69649446, 0.7039822, 0.70821774, 0.7193521, 0.69106364, 0.7108124, 0.7027237, 0.71939534, 0.7225022, 0.7248391, 0.72763026, 0.7266857, 0.7285323, 0.72909623, 0.73035854, 0.7304141, 0.7321545, 0.7332543, 0.73237205, 0.73255163, 0.734495, 0.73566407, 0.73612165, 0.73663735, 0.7384801, 0.7391184, 0.73889023, 0.7386808, 0.7406001, 0.73358095, 0.7404652, 0.74297637, 0.74048746, 0.7438451, 0.7422035]}
last_completed_run_time:3:53:35.505063
parameter_count:5652507