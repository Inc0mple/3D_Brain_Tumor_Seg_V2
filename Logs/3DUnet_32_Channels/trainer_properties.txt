device:cuda
display_plot:True
net:UNet3d(
  (conv): DoubleConv(
    (double_conv): Sequential(
      (0): Conv3d(4, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (1): GroupNorm(8, 32, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (4): GroupNorm(8, 32, eps=1e-05, affine=True)
      (5): ReLU(inplace=True)
    )
  )
  (enc1): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(32, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 64, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 64, eps=1e-05, affine=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  (enc2): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 128, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 128, eps=1e-05, affine=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  (enc3): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 256, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 256, eps=1e-05, affine=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  (enc4): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 256, eps=1e-05, affine=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 256, eps=1e-05, affine=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  (dec1): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(512, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 128, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 128, eps=1e-05, affine=True)
        (5): ReLU(inplace=True)
      )
    )
  )
  (dec2): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(256, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 64, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 64, eps=1e-05, affine=True)
        (5): ReLU(inplace=True)
      )
    )
  )
  (dec3): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(128, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 32, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 32, eps=1e-05, affine=True)
        (5): ReLU(inplace=True)
      )
    )
  )
  (dec4): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 32, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 32, eps=1e-05, affine=True)
        (5): ReLU(inplace=True)
      )
    )
  )
  (out): Out(
    (conv): Conv3d(32, 3, kernel_size=(1, 1, 1), stride=(1, 1, 1))
  )
)
criterion:BCEDiceLoss(
  (bce): BCEWithLogitsLoss()
  (dice): DiceLoss()
)
optimizer:Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: False
    lr: 5.000000000000001e-07
    maximize: False
    weight_decay: 0
)
scheduler:<torch.optim.lr_scheduler.ReduceLROnPlateau object at 0x7f6a95d1e6a0>
accumulation_steps:4
phases:['train', 'val']
num_epochs:50
dataloaders:{'train': <torch.utils.data.dataloader.DataLoader object at 0x7f6a935a5eb0>, 'val': <torch.utils.data.dataloader.DataLoader object at 0x7f6a935a2190>, 'test': <torch.utils.data.dataloader.DataLoader object at 0x7f6a935a26d0>}
best_loss:0.17326897256216914
losses:{'train': [1.4398205448012842, 1.2542469542289414, 1.1266232257560178, 1.0232519788433845, 0.9210397295172223, 0.8122872994653172, 0.6708716898589986, 0.5194564921207754, 0.4095186970193123, 0.34165055432247116, 0.2925348372797096, 0.2656578536892572, 0.2488569606223034, 0.2375395386107974, 0.2402355274886686, 0.23680373057439752, 0.22951658325050267, 0.20604476023876167, 0.20440251657831351, 0.19507692663615195, 0.19721262907687248, 0.19703710620280906, 0.19095002534045014, 0.18104766751196902, 0.17084385066544602, 0.1685494986210486, 0.16750765938892564, 0.16580893112056155, 0.1647543709286039, 0.16359326702333676, 0.16308008284509862, 0.16136451075455535, 0.16065152398816987, 0.1602698790313173, 0.15938545949048868, 0.15750665576002443, 0.15686350416377923, 0.15626454310838714, 0.15607476997908076, 0.15464286147811568, 0.15409144342738865, 0.15221395146654132, 0.15128806222074384, 0.15115515070439745, 0.15107936259118324, 0.15088731903200367, 0.150828314739715, 0.1506812431824751, 0.15043133896679933, 0.15040733248788593], 'val': [1.3364693038868454, 1.186996729868763, 1.0714244820036978, 0.9743554659609525, 0.8676587680600724, 0.7427574351148786, 0.5851522616620334, 0.44954400354961177, 0.3666087417107708, 0.32476773408223997, 0.3314388596786643, 0.2566083534708563, 0.24128628255061382, 0.23161245446722462, 0.2377650628112397, 0.2383715345893266, 0.22279688448838467, 0.2083941065477875, 0.2289346954170263, 0.20129404287293273, 0.24231794518682193, 0.21584177242135102, 0.21434219265883825, 0.1923381787426067, 0.18864836164240567, 0.192052461206913, 0.18829695121297296, 0.18487002152316975, 0.18335528826376177, 0.18347506098589808, 0.18307953609048194, 0.1809887819976177, 0.17919999192345817, 0.18018888049530532, 0.17917265630555604, 0.17857129773441352, 0.17822801799706692, 0.17704970024104388, 0.1773732419846193, 0.1776699499701554, 0.17935243080247124, 0.17422306846897556, 0.1737971713520446, 0.17390678808936533, 0.17326897256216914, 0.17347511719420272, 0.17342092996498323, 0.17351082051700017, 0.1735004227397577, 0.17345552174550183]}
dice_scores:{'train': [0.38184145, 0.5858681, 0.59760267, 0.6146447, 0.67404604, 0.6782078, 0.7228107, 0.76004946, 0.77146083, 0.77846843, 0.794215, 0.8018514, 0.8048961, 0.8088059, 0.8003446, 0.80067647, 0.80465263, 0.8246449, 0.82421094, 0.8316261, 0.8286351, 0.8285469, 0.8322493, 0.84115434, 0.8504939, 0.8527152, 0.85365105, 0.8551876, 0.8560796, 0.8571577, 0.8576389, 0.8590931, 0.85972995, 0.85995096, 0.8607734, 0.8623942, 0.8628708, 0.86330503, 0.8633989, 0.8646853, 0.86508876, 0.86682963, 0.86768854, 0.8678148, 0.8678782, 0.8680663, 0.86809134, 0.86824226, 0.8684276, 0.86845505], 'val': [0.49853718, 0.6287496, 0.60411733, 0.7086012, 0.66275656, 0.7129457, 0.74526834, 0.7502571, 0.7686576, 0.7655247, 0.74269783, 0.8004126, 0.8059526, 0.8090186, 0.80196583, 0.7957948, 0.80862606, 0.8198436, 0.7987876, 0.8250698, 0.7851834, 0.8081298, 0.81071675, 0.83043766, 0.83373237, 0.8302629, 0.8338475, 0.8369011, 0.8383356, 0.8384773, 0.83830345, 0.84056675, 0.8421066, 0.8411338, 0.8417746, 0.84216195, 0.84255743, 0.844015, 0.84328806, 0.84298813, 0.8409262, 0.84593123, 0.84631974, 0.8462182, 0.8468874, 0.8466621, 0.8467032, 0.8465795, 0.8465906, 0.8466439]}
jaccard_scores:{'train': [0.2608455, 0.4331449, 0.44094762, 0.46150506, 0.5264945, 0.5318628, 0.58399147, 0.6309732, 0.64441586, 0.6524002, 0.6730435, 0.68400896, 0.6877316, 0.6915072, 0.6810992, 0.6852657, 0.6866464, 0.71124595, 0.71142924, 0.7218015, 0.718167, 0.7168829, 0.7224583, 0.7341021, 0.74699, 0.7498594, 0.75118566, 0.75334066, 0.75469196, 0.7562441, 0.75670564, 0.75894517, 0.7597511, 0.76012033, 0.76106745, 0.76356906, 0.7641842, 0.76495427, 0.76498926, 0.7669591, 0.7674297, 0.77008396, 0.7713348, 0.7714831, 0.7716257, 0.7718338, 0.77190155, 0.7720757, 0.7724042, 0.7724367], 'val': [0.3557175, 0.47378, 0.44723278, 0.5622199, 0.5073063, 0.57229835, 0.61098194, 0.61784184, 0.6405451, 0.6361743, 0.6189346, 0.68397844, 0.6896356, 0.693554, 0.6859308, 0.67417204, 0.6900447, 0.7073093, 0.68029416, 0.71257603, 0.65877295, 0.6879866, 0.695589, 0.72090864, 0.72531295, 0.72063303, 0.7252884, 0.7292133, 0.73129314, 0.73150563, 0.7311164, 0.73426807, 0.73612744, 0.734811, 0.7358479, 0.73659503, 0.7364597, 0.73867774, 0.737923, 0.7372597, 0.73498464, 0.7415308, 0.7420356, 0.741891, 0.7427863, 0.74249405, 0.74255854, 0.74239796, 0.74241143, 0.74248457]}
last_completed_run_time:5:19:13.541999
parameter_count:10045731