device:cuda
display_plot:True
net:UNet3d_SELU(
  (conv): DoubleConv(
    (double_conv): Sequential(
      (0): Conv3d(4, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (1): GroupNorm(8, 24, eps=1e-05, affine=True)
      (2): SELU(inplace=True)
      (3): Conv3d(24, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (4): GroupNorm(8, 24, eps=1e-05, affine=True)
      (5): SELU(inplace=True)
    )
  )
  (enc1): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(24, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 48, eps=1e-05, affine=True)
          (2): SELU(inplace=True)
          (3): Conv3d(48, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 48, eps=1e-05, affine=True)
          (5): SELU(inplace=True)
        )
      )
    )
  )
  (enc2): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(48, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 96, eps=1e-05, affine=True)
          (2): SELU(inplace=True)
          (3): Conv3d(96, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 96, eps=1e-05, affine=True)
          (5): SELU(inplace=True)
        )
      )
    )
  )
  (enc3): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(96, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): SELU(inplace=True)
          (3): Conv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 192, eps=1e-05, affine=True)
          (5): SELU(inplace=True)
        )
      )
    )
  )
  (enc4): Down(
    (encoder): Sequential(
      (0): MaxPool3d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): DoubleConv(
        (double_conv): Sequential(
          (0): Conv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (1): GroupNorm(8, 192, eps=1e-05, affine=True)
          (2): SELU(inplace=True)
          (3): Conv3d(192, 192, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (4): GroupNorm(8, 192, eps=1e-05, affine=True)
          (5): SELU(inplace=True)
        )
      )
    )
  )
  (dec1): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(384, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 96, eps=1e-05, affine=True)
        (2): SELU(inplace=True)
        (3): Conv3d(96, 96, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 96, eps=1e-05, affine=True)
        (5): SELU(inplace=True)
      )
    )
  )
  (dec2): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(192, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 48, eps=1e-05, affine=True)
        (2): SELU(inplace=True)
        (3): Conv3d(48, 48, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 48, eps=1e-05, affine=True)
        (5): SELU(inplace=True)
      )
    )
  )
  (dec3): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(96, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): SELU(inplace=True)
        (3): Conv3d(24, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 24, eps=1e-05, affine=True)
        (5): SELU(inplace=True)
      )
    )
  )
  (dec4): Up(
    (up): Upsample(scale_factor=2.0, mode=trilinear)
    (conv): DoubleConv(
      (double_conv): Sequential(
        (0): Conv3d(48, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (1): GroupNorm(8, 24, eps=1e-05, affine=True)
        (2): SELU(inplace=True)
        (3): Conv3d(24, 24, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        (4): GroupNorm(8, 24, eps=1e-05, affine=True)
        (5): SELU(inplace=True)
      )
    )
  )
  (out): Out(
    (conv): Conv3d(24, 3, kernel_size=(1, 1, 1), stride=(1, 1, 1))
  )
)
criterion:BCEDiceLoss(
  (bce): BCEWithLogitsLoss()
  (dice): DiceLoss()
)
optimizer:Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: False
    lr: 5.000000000000001e-08
    maximize: False
    weight_decay: 0
)
scheduler:<torch.optim.lr_scheduler.ReduceLROnPlateau object at 0x7f74d5432430>
accumulation_steps:4
phases:['train', 'val']
num_epochs:50
dataloaders:{'train': <torch.utils.data.dataloader.DataLoader object at 0x7f74d5492400>, 'val': <torch.utils.data.dataloader.DataLoader object at 0x7f74d5492640>, 'test': <torch.utils.data.dataloader.DataLoader object at 0x7f74d54928b0>}
best_loss:0.19047840586248435
losses:{'train': [1.100333464689581, 0.9240461825871196, 0.7475395742024759, 0.5613469680905795, 0.41877884125981496, 0.34587976920060787, 0.30197606822157086, 0.3114805392382716, 0.29126341884580403, 0.2613765792531659, 0.2378487999165013, 0.22039358054390426, 0.22437162884287962, 0.22496825623761565, 0.24233796569331065, 0.21782900016230775, 0.20893135114427755, 0.20771086298127592, 0.22405844858844018, 0.207404091500964, 0.2257639982174558, 0.2058308256556326, 0.1932787545620262, 0.18955755055290666, 0.18713609738268328, 0.18353731578973762, 0.18186178089547972, 0.18024913949658208, 0.17931333369798533, 0.17809361730748258, 0.17735736342607342, 0.1762375294057362, 0.17563780439670548, 0.176642433984538, 0.17485675589666622, 0.17329363941353085, 0.17273345660460765, 0.17292347061713387, 0.17057922377672485, 0.16967586780625604, 0.1695015321383005, 0.16931544384518957, 0.1691924082150704, 0.16906462602685612, 0.1689813008864796, 0.16861526954196704, 0.16860949175836015, 0.16860543869917383, 0.1685601411521888, 0.1685597240471568], 'val': [0.9989930976111934, 0.8497183120475625, 0.6477901468861778, 0.4808650590338797, 0.38938872516155243, 0.32516077132719867, 0.33794857617819085, 0.3589925647906537, 0.296402246041118, 0.2723220387157404, 0.24002573948423817, 0.24106310870287553, 0.2320852150332253, 0.24449301019029798, 0.2268935796224846, 0.2254732608232858, 0.22254516507657068, 0.2196724867483355, 0.22091005911242287, 0.2519546886378864, 0.239226241437894, 0.21204297118029505, 0.20638475032909862, 0.20353839321518843, 0.20096013863693993, 0.20218513189059384, 0.20157889656300815, 0.19676575697255586, 0.19620086758766533, 0.1965240181054709, 0.19527348243402984, 0.19369362224385422, 0.19702736639751578, 0.1957356925561743, 0.19233877099347566, 0.19292716246168568, 0.19343566205703988, 0.19359106022231984, 0.19118333073719493, 0.19080359980745135, 0.19060076998089845, 0.19047840586248435, 0.19053866320623541, 0.19050728346941606, 0.1907213274038063, 0.1907065142438097, 0.19066678620171998, 0.19067279080737312, 0.1906652920088678, 0.1906633492348329]}
dice_scores:{'train': [0.4875243, 0.5793746, 0.6283794, 0.68782073, 0.73261607, 0.7576946, 0.77322024, 0.7479567, 0.7592478, 0.7805813, 0.7988684, 0.81270236, 0.8065094, 0.8033707, 0.78728634, 0.8087945, 0.81588244, 0.816335, 0.8047476, 0.816197, 0.7989699, 0.8166359, 0.8281776, 0.8316128, 0.8335241, 0.83682144, 0.83811045, 0.8395922, 0.8404101, 0.841388, 0.84220093, 0.84307516, 0.8435619, 0.8427308, 0.84426093, 0.84567785, 0.8461089, 0.8457615, 0.8480191, 0.8487924, 0.84891814, 0.8491043, 0.84924674, 0.8494443, 0.84946746, 0.8498464, 0.84985495, 0.8498657, 0.8499063, 0.8499063], 'val': [0.6032936, 0.6091866, 0.64723855, 0.70181656, 0.73872524, 0.75888777, 0.7246622, 0.69689304, 0.7473356, 0.7715849, 0.7950683, 0.79347885, 0.7988657, 0.78661305, 0.8016639, 0.80072945, 0.80286765, 0.8047254, 0.80416626, 0.77415615, 0.7870535, 0.8111224, 0.8160165, 0.81881076, 0.8209264, 0.8192278, 0.8197843, 0.8244023, 0.82473975, 0.824722, 0.8255338, 0.8271117, 0.8249997, 0.82487035, 0.82832867, 0.82744974, 0.82801193, 0.82800627, 0.8296075, 0.82982934, 0.829898, 0.8300601, 0.83000344, 0.8300057, 0.82987666, 0.82989925, 0.82992756, 0.8299262, 0.8299327, 0.8299329]}
jaccard_scores:{'train': [0.35173225, 0.42676818, 0.47695726, 0.5422404, 0.59463584, 0.6312451, 0.6449578, 0.6183868, 0.6337332, 0.6556379, 0.6787186, 0.696532, 0.68882674, 0.68630695, 0.66608113, 0.6939181, 0.70102686, 0.7003832, 0.6876607, 0.7030925, 0.6822631, 0.70256865, 0.71684587, 0.72136396, 0.7240381, 0.7277288, 0.73010206, 0.73172456, 0.7331717, 0.7344792, 0.73530084, 0.7369613, 0.7374678, 0.7364048, 0.7385574, 0.7405399, 0.74112463, 0.741051, 0.7439477, 0.7450465, 0.74517643, 0.745454, 0.7456513, 0.7458543, 0.74594396, 0.7463912, 0.7464079, 0.7464149, 0.746471, 0.7464713], 'val': [0.44741002, 0.4527641, 0.49407804, 0.55807173, 0.6064051, 0.62937844, 0.58749175, 0.5551546, 0.6117347, 0.64286983, 0.67182153, 0.67171836, 0.67827374, 0.6611135, 0.68030936, 0.67967683, 0.6816053, 0.68573266, 0.68421125, 0.65289575, 0.66202974, 0.69411004, 0.70113397, 0.70428854, 0.7076922, 0.70568424, 0.7062433, 0.7118703, 0.71220964, 0.7123542, 0.7131106, 0.71494687, 0.7125387, 0.7123561, 0.7169011, 0.7160802, 0.7163459, 0.7167901, 0.7187285, 0.7190307, 0.7191741, 0.7194051, 0.7193548, 0.71934795, 0.7192226, 0.7192476, 0.71928865, 0.7192865, 0.7192955, 0.71929526]}
last_completed_run_time:3:34:44.640158
parameter_count:5652507
